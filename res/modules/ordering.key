/*
 * Translation of Alloy's module util/ordering.
 *
 * <S> is used in this file a as placeholder for the signature being
 * totally ordered.
 *
 * This file defines translations for all the predicates known from
 * the Alloy module.
 *
 * The rules defined here distinguish between <S> being finite (see
 * finiteness.key) or infinite. In the latter case, a bijection from
 * integers to <S> is defined, similar to the finite case but without
 * the upper bound.
 *
 * When <S> is infinite, then last<S> is defined to be the empty set.
 */
\functions {
    // defining the relation symbol
    Rel1 <S>;

    // the first element of the signature
    Rel1 first<S>;

    // .. and the last
    Rel1 last<S>;

    // the prev / next relation
    Rel2 prev<S>;
    Rel2 next<S>;
    
    // predecessors / successors of an elements
    Rel1 prevs<S>(Rel1);
    Rel1 nexts<S>(Rel1);

    // the larger of two elements
    Rel1 larger<S>(Rel1,Rel1);

    // the smaller of two elements
    Rel1 smaller<S>(Rel1,Rel1);

    // the largest element of a set
    Rel1 max<S>(Rel1);

    // the smallest element of a set
    Rel1 min<S>(Rel1);
}

\predicates {

    // comparision predicates
    lt<S>(Rel1,Rel1);
    gt<S>(Rel1,Rel1);
    lte<S>(Rel1,Rel1);
    gte<S>(Rel1,Rel1);

}

\schemaVariables {
    \term int i,j;
    \term Atom a,b;
    \variables int n;
    \variables Atom va;
}

\rules {

    /*********************************************/
    /* definitions for finite and infinite cases */
    /*********************************************/
    <S>_nextDef {
        \find (in(binary(a,b),next<S>))
        \replacewith (\if (in(a,<S>) & in(b,<S>))
                      \then (1+ord(<S>,a)=ord(<S>,b))
                      \else (false))
        \heuristics (simplify_enlarging)
    };

    <S>_prevDef {
        \find (prev<S>)
        \replacewith (transp(next<S>))
        \heuristics (simplify_enlarging)
    };

    <S>_prevsDef {
        \schemaVar \term Rel1 R;
        \find (prevs<S>(R))
        \replacewith (join1x2(R,transClos(transp(next<S>))))
        \heuristics (simplify_enlarging)
    };

    <S>_nextsDef {
        \schemaVar \term Rel1 R;
        \find (nexts<S>(R))
        \replacewith (join1x2(R,transClos(next<S>)))
        \heuristics (simplify_enlarging)
    };

    <S>_ltDef {
        \schemaVar \term Rel1 R,T;
        \find (lt<S>(R,T))
        \replacewith (subrel(R,prevs<S>(T)))
        \heuristics (simplify_enlarging)
    };

    <S>_gtDef {
        \schemaVar \term Rel1 R,T;
        \find (gt<S>(R,T))
        \replacewith (subrel(R,nexts<S>(T)))
        \heuristics (simplify_enlarging)
    };

    <S>_lteDef {
        \schemaVar \term Rel1 R,T;
        \find (lte<S>(R,T))
        \replacewith (R=T | lt<S>(R,T))
        \heuristics (simplify_enlarging)
    };

    <S>_gteDef {
        \schemaVar \term Rel1 R,T;
        \find (gte<S>(R,T))
        \replacewith (R=T | gt<S>(R,T))
        \heuristics (simplify_enlarging)
    };

    <S>_largerDef {
        \schemaVar \term Rel1 R,T;
        \find (larger<S>(R,T))
        \replacewith (\if (lt<S>(R,T))
                      \then (T)
                      \else (R))
        \heuristics (simplify_enlarging)
    };

    <S>_smallerDef {
        \schemaVar \term Rel1 R,T;
        \find (smaller<S>(R,T))
        \replacewith (\if(lt<S>(R,T))
                      \then (R)
                      \else (T))
        \heuristics (simplify_enlarging)
    };

    <S>_maxDef {
        \schemaVar \term Rel1 R;
        \find (max<S>(R))
        \replacewith (diff1(R,join1x2(R,transClos(transp(next<S>)))))
        \heuristics (simplify_enlarging)
    };

    <S>_minDef {
        \schemaVar \term Rel1 R;
        \find (min<S>(R))
        \replacewith (diff1(R,join1x2(R,transClos(next<S>))))
        \heuristics (simplify_enlarging)
    };

    <S>_nextTyping {
        \find (next<S>)
        \add (subrel(next<S>,prod1x1(<S>,<S>)) ==>)
        \heuristics (implications2)
    };

    <S>_prevTyping {
        \find (prev<S>)
        \add (subrel(prev<S>,prod1x1(<S>,<S>)) ==>)
        \heuristics (implications2)
    };

    /**************************************
     * lemmata for finite & infinite case *
     **************************************/
    <S>_nextJoin {
        \assumes (in(a,<S>) ==>)
        \find (join2x1(next<S>,sin(a)))
        \sameUpdateLevel
        \replacewith (\if (ord(<S>,a) > 0)
                      \then (sin(elem1(<S>,-1+ord(<S>,a))))
                      \else (none))
        \heuristics (simplify)
    };

    <S>_tc {
        \assumes (in(a,<S>), in(b,<S>) ==>)
        \find (in(binary(a,b),transClos(next<S>)))
        \replacewith (ord(<S>,a) < ord(<S>,b))
        \heuristics (simplify)
    };

    <S>_tc2 {
        \assumes (in(a,<S>), in(b,<S>) ==>)
        \find (in(binary(a,b),transClos(transp(next<S>))))
        \replacewith (ord(<S>,a) > ord(<S>,b))
        \heuristics (simplify)
    };

    <S>_tcITE {
        \find (in(binary(a,b),transClos(next<S>)))
        \replacewith (\if (in(a,<S>) & in(b,<S>))
                      \then (ord(<S>,a) < ord(<S>,b))
                      \else (false))
        \heuristics (simplify_enlarging)
    };

    <S>_tcITE2 {
        \find (in(binary(a,b),transClos(transp(next<S>))))
        \replacewith (\if (in(a,<S>) & in(b,<S>))
                      \then (ord(<S>,a) > ord(<S>,b))
                      \else (false))
        \heuristics (simplify_enlarging)
    };

/*    <S>_nexts {
        \assumes (in(b,<S>) ==>)
        \find (in(a,nexts<S>(sin(b))))
        \replacewith (\if (in(a,<S>))
                      \then (ord(<S>,a) > ord(<S>,b))
                      \else (false))
        \heuristics (simplify)
    };

    <S>_prevs {
        \assumes (in(b,<S>) ==>)
        \find (in(a,prevs<S>(sin(b))))
        \replacewith (\if (in(a,<S>))
                      \then (ord(<S>,a) < ord(<S>,b))
                      \else (false))
        \heuristics (simplify)
    };

    <S>_lt {
        \assumes (in(a,<S>),in(b,<S>) ==>)
        \find (lt<S>(sin(a),sin(b)))
        \replacewith (ord(<S>,a) < ord(<S>,b))
        \heuristics (simplify)
    };

    <S>_gt {
        \assumes (in(a,<S>),in(b,<S>) ==>)
        \find (gt<S>(sin(a),sin(b)))
        \replacewith (ord(<S>,a) > ord(<S>,b))
        \heuristics (simplify)
    };

    <S>_max_none {
        \find (max<S>(none))
        \replacewith (none)
        \heuristics (concrete)
    };

    <S>_min_none {
        \find (min<S>(none))
        \replacewith (none)
        \heuristics (concrete)
    };

    <S>_max {
        \schemaVar \term Rel1 R;
        \find (in(a,max<S>(R)))
        \varcond(\notFreeIn(va,a,R))
        \replacewith (\if (in(a,<S>)) \then (
                      \if (in(a,R))
                      \then (\forall va; (in(va,R) & in(va,<S>) -> ord(<S>,va) <= ord(<S>,a)))
                      \else (false)) \else (true))
        \heuristics (simplify_enlarging)
    };

    <S>_min {
        \schemaVar \term Rel1 R;
        \find (in(a,min<S>(R)))
        \varcond(\notFreeIn(va,a,R))
        \replacewith (\if (in(a,<S>)) \then (
                      \if (in(a,R))
                      \then (\forall va; (in(va,R) & in(va,<S>) -> ord(<S>,va) >= ord(<S>,a)))
                      \else (false)) \else (true))
        \heuristics (simplify_enlarging)
    };*/

    /*****************/
    /* infinite case */
    /*****************/

    elemInjective<S> {
        \assumes (i >= 0, j >= 0
                  ==> finite(<S>))
        \find (elem1(<S>,i) = elem1(<S>,j))
        \replacewith (i = j)
        \heuristics (simplify)
    };

    elemSurjective<S> {
        \assumes (==> finite(<S>))
        \find (in(a,<S>) ==>)
        \varcond (\notFreeIn(n,a))
        \add (\exists n; (n >= 0 & a = elem1(<S>,n)) ==>)
    };

    <S>_ordInverses_inf {
        \assumes (i >= 0 ==> finite(<S>))
        \find (ord(<S>,elem1(<S>,i)))
        \replacewith (i)
        \heuristics (simplify)
    };

    //---
    //lemmata for elem1(<S>,_) and ord<S>
    //---

    elem<S> {
        \assumes (==> finite(<S>))
        \find (elem1(<S>,i))
        \varcond(\notFreeIn(va,i))
        \add (\if (i >= 0)
              \then (\exists va; (  elem1(<S>,i) = va
                                  & ord(<S>,va) = i
                                  & in(va,<S>)))
              \else (true) ==>)
        \heuristics (normalization, noDuplicateApp)
    };

    elemRedund<S> {
        \assumes (elem1(<S>,i) = a, ord(<S>,a) = i, in(a,<S>) ==> finite(<S>))
        \find (\exists va; (elem1(<S>,i) = va & ord(<S>,va) = i & in(va,<S>)))
        \varcond (\notFreeIn(va,i,a))
        \replacewith (true)
        \heuristics (concrete)
    };

    ord<S> {
        \assumes (==> finite(<S>))
        \find (ord(<S>,a))
        \varcond(\notFreeIn(n,a))
        \add (\if (in(a,<S>))
              \then (\exists n; (  n >= 0
                                 & elem1(<S>,n) = a
                                 & ord(<S>,a) = n
                                 & in(a,<S>)))
              \else (true) ==>)
        \heuristics (normalization, noDuplicateApp)
    };

    ordRedund<S> {
        \assumes (elem1(<S>,i) = a, ord(<S>,a) = i, in(a,<S>) ==> finite(<S>))
        \find (\exists n; (  n >= 0
                           & elem1(<S>,n) = a
                           & ord(<S>,a) = n
                           & in(a,<S>)))
        \varcond(\notFreeIn(n,i,a))
        \replacewith (true)
        \heuristics (concrete)
    };

    elemEq<S> {
        \assumes (in(a,<S>), in(b,<S>) ==> finite(<S>))
        \find (a = b)
        \replacewith (ord(<S>,a) = ord(<S>,b))
        \heuristics (simplify)
    };

    //---
    //definition of ordering's funs and preds
    //---

    <S>_firstDef_inf {
        \assumes (==> finite(<S>))
        \find (first<S>)
        \replacewith (sin(elem1(<S>,0)))
        \heuristics (simplify)
    };

    <S>_lastDef_inf {
        \assumes (==> finite(<S>))
        \find (last<S>)
        \replacewith (none)
        \heuristics (simplify)
    };

    //---
    //lemmata
    //---
    <S>_nextJoin_inf {
        \assumes (in(a,<S>) ==> finite(<S>))
        \find (join1x2(sin(a),next<S>))
        \sameUpdateLevel
        \replacewith (sin(elem1(<S>,1+ord(<S>,a))))
        \heuristics (simplify)
    };

    /**************
     * finite case *
     ***************/

    //---
    //definition of ordering's funs and preds
    //---

    <S>_first_fin {
        \assumes (finite(<S>) ==>)
        \find (first<S>)
        \replacewith (\if (card(<S>) > 0)
                      \then (sin(elem1(<S>,0)))
                      \else (first<S>))
        \heuristics (simplify_enlarging, noDuplicateApp)
    };

    <S>_last_fin {
        \assumes (finite(<S>) ==>)
        \find (last<S>)
        \replacewith (\if (card(<S>) > 0)
                      \then (sin(elem1(<S>,-1+card(<S>))))
                      \else (last<S>))
        \heuristics (simplify_enlarging, noDuplicateApp)
    };

    //---
    //lemmata
    //---
    <S>_nextJoin_fin {
        \assumes (in(a,<S>), finite(<S>) ==>)
        \find (join1x2(sin(a),next<S>))
        \sameUpdateLevel
        \replacewith (\if (ord(<S>,a)+1 < card(<S>))
                      \then(sin(elem1(<S>,1+ord(<S>,a))))
                      \else(none))
        \heuristics (simplify)
    };

    /**************************/
    /* induction for ordering */
    /**************************/

    // basic induction rules not suited for automatic application
    <S>_induction {
        \schemaVar \formula phi;
        \schemaVar \variables int v;
        \find (finite(<S>) ==>)
        \varcond (\notFreeIn (v,phi))
        "Base Case": \add (in(elem1(<S>,0),<S>) ==> {\subst va; elem1(<S>,0)}phi);
        "Step Case": \add (==> \forall v; (
                                      v >= 0 & v <= -2+card(<S>)
                                    & {\subst va; elem1(<S>,v)}phi
                                    & in(elem1(<S>,v),<S>) & in(elem1(<S>,1+v),<S>)
                                 -> {\subst va; elem1(<S>,1+v)}phi));
        "Use Case": \add (\forall va; (in(va,<S>) -> phi) ==>)
    };
    <S>_induction_inf {
        \schemaVar \formula phi;
        \schemaVar \variables int v;
        \find (==> finite(<S>))
        \varcond (\notFreeIn (v,phi))
        "Base Case": \add (in(elem1(<S>,0),<S>) ==> {\subst va; elem1(<S>,0)}phi);
        "Step Case": \add (==> \forall v; (
                                      v >= 0
                                    & {\subst va; elem1(<S>,v)}phi
                                    & in(elem1(<S>,v),<S>) & in(elem1(<S>,1+v),<S>)
                                 -> {\subst va; elem1(<S>,1+v)}phi));
        "Use Case": \add (\forall va; (in(va,<S>) -> phi) ==>)
    };

    // induction rules for automatic application
    <S>_induction2 {
        \schemaVar \term Atom t;
        \schemaVar \variables Atom s;
        \schemaVar \formula phi;
        \schemaVar \variables int v;
        \assumes (finite(<S>) ==>)
        \find (in(t,<S>) ==>)
        \varcond (\notFreeIn (v,phi,t), \notFreeIn(s,t))
        "Base Case": \add (==> {\subst s; elem1(<S>,0)}phi);
        "Step Case": \add (==> \forall v; (
                                      v >= 0 & v <= -2+card(<S>)
                                    & {\subst s; elem1(<S>,v)}phi
                                 -> {\subst s; elem1(<S>,1+v)}phi));
        "Use Case": \add ({\subst s; t}phi ==>)
        \heuristics (orderingInduct)
    };
    <S>_induction2_inf {
        \schemaVar \term Atom t;
        \schemaVar \variables Atom s;
        \schemaVar \formula phi;
        \schemaVar \variables int v;
        \assumes (==> finite(<S>))
        \find (in(t,<S>) ==>)
        \varcond (\notFreeIn (v,phi,t), \notFreeIn(s,t))
        "Base Case": \add (==> {\subst s; elem1(<S>,0)}phi);
        "Step Case": \add (==> \forall v; (
                                      v >= 0
                                    & {\subst s; elem1(<S>,v)}phi
                                 -> {\subst s; elem1(<S>,1+v)}phi));
        "Use Case": \add ({\subst s; t}phi ==>)
        \heuristics (orderingInduct)
    };

    // induction rule introducing a case split on finite(<S>)
    <S>_induction_split {
        \schemaVar \term Atom t;
        \schemaVar \variables Atom s;
        \schemaVar \formula phi;
        \schemaVar \variables int v;
        \varcond (\notFreeIn (v,phi,t), \notFreeIn(s,t))
        "Base Case Finite": \add (finite(<S>) ==> {\subst s; elem1(<S>,0)}phi);
        "Step Case Finite": \add (finite(<S>) ==> \forall v; (
                                      v >= 0 & v <= -2+card(<S>)
                                    & {\subst s; elem1(<S>,v)}phi
                                 -> {\subst s; elem1(<S>,1+v)}phi));
        "Use Case Finite": \add (finite(<S>), \forall s; (in(s,<S>) -> phi) ==>);
        "Base Case Infinite": \add (==> finite(<S>), {\subst s; elem1(<S>,0)}phi);
        "Step Case Infinite": \add (==> finite(<S>), \forall v; (
                                      v >= 0
                                    & {\subst s; elem1(<S>,v)}phi
                                 -> {\subst s; elem1(<S>,1+v)}phi));
        "Use Case Infinite": \add (\forall s; (in(s,<S>) -> phi) ==> finite(<S>))
    };

}
