\schemaVariables {
    \term Relation R,S,T;
    \term Rel1 R1,S1,T1,U1;
    \term Rel2 R2,S2,T2,U2;
    \term Rel3 R3,S3,T3;
    \term Tuple t;
    \term Atom a,b,c,d,e,f;
    \term Tuple2 a2,b2;
    \term Tuple3 a3,b3;
    \term int n;
    \variables Atom va,vb,vc,vd,ve,vf;
    \variables int vn;
    \variables Tuple vt,vu;
    \variables Tuple2 va2;
    \variables Tuple3 va3;
    \formula phi;
}

\rules {
////////////////////////////////////////////////
////////////////////////////////////////////////
//  sin
////////////////////////////////////////////////
////////////////////////////////////////////////
    equalSin1 { /* proved */
        \find (sin(a) = sin(b))
        \replacewith (a = b)
        \heuristics (simplify)
        \displayname "simplify"
    };
    equalSin2 { /* proved */
        \find (sin2(a2) = sin2(b2))
        \replacewith (a2 = b2)
        \heuristics (simplify)
        \displayname "simplify"
    };
    equalSin3 { /* proved */
        \find (sin3(a3) = sin3(b3))
        \replacewith (a3 = b3)
        \heuristics (simplify)
        \displayname "simplify"
    };
////////////////////////////////////////////////
////////////////////////////////////////////////
//  prod
////////////////////////////////////////////////
////////////////////////////////////////////////
    /*
     * rewrite arrow product of singletons
     */
    prodSin2 { /* proved */
        \find (prod1x1(sin(a),sin(b)))
        \replacewith (sin2(binary(a,b)))
        \heuristics (concrete)
        // immediate
        \displayname "simplify_prod"
    };
    prodSin3 { /* proved */
        \find (prod1x2(sin(a),sin2(binary(b,c))))
        \replacewith (sin3(ternary(a,b,c)))
        \heuristics (concrete)
        // immediate
        \displayname "simplify_prod"
    };
    prodSin3_ { /* proved */
        \find (prod2x1(sin2(binary(a,b)),sin(c)))
        \replacewith (sin3(ternary(a,b,c)))
        \heuristics (concrete)
        // immediate
        \displayname "simplify_prod"
    };

    /*
     * arrow product containing none
     */
    prod1x1None { /* proved */
        \find (prod1x1(R1,none))
        \replacewith (none2)
        \heuristics (concrete)
        // immediate
        \displayname "prod_concrete"
    };
    prod1x1None_ { /* proved */
        \find (prod1x1(none,R1))
        \replacewith (none2)
        \heuristics (concrete)
        // immediate
        \displayname "prod_concrete"
    };
    prod1x2None { /* proved */
        \find (prod1x2(R1,none2))
        \replacewith (none3)
        \heuristics (concrete)
        // immediate
        \displayname "prod_concrete"
    };
    prod1x2None_ { /* proved */
        \find (prod1x2(none,R2))
        \replacewith (none3)
        \heuristics (concrete)
        // immediate
        \displayname "prod_concrete"
    };
    prod2x1None { /* proved */
        \find (prod2x1(R2,none))
        \replacewith (none3)
        \heuristics (concrete)
        // immediate
        \displayname "prod_concrete"
    };
    prod2x1None_ { /* proved */
        \find (prod2x1(none2,R1))
        \replacewith (none3)
        \heuristics (concrete)
        // immediate
        \displayname "prod_concrete"
    };
    /*
     * transposition of arrow product
     */
    prodTransp { /* proved */
        \find (transp(prod1x1(R1,S1)))
        \replacewith (prod1x1(S1,R1))
        \heuristics (simplify)
        // simplify
        \displayname "simplify_transp_prod"
    };

////////////////////////////////////////////////
////////////////////////////////////////////////
//  diff
////////////////////////////////////////////////
////////////////////////////////////////////////

    /*
     * difference with univ
     */
    diffUniv { /* proved */
        \find (diff1(R1,univ))
        \replacewith (none)
        \heuristics (concrete)
        // immediate
        \displayname "diff_concrete"
    };

////////////////////////////////////////////////
////////////////////////////////////////////////
//  union
////////////////////////////////////////////////
////////////////////////////////////////////////
    /*
     * union with univ
     */
    unionUniv { /* proved */
        \find (union1(univ,R1))
        \replacewith (univ)
        \heuristics (concrete)
        // immediate
        \displayname "union_concrete"
    };
    unionUniv_ { /* proved */
        \find (union1(R1,univ))
        \replacewith (univ)
        \heuristics (concrete)
        \displayname "union_concrete"
    };
////////////////////////////////////////////////
////////////////////////////////////////////////
//  inter
////////////////////////////////////////////////
////////////////////////////////////////////////
    /*
     * intersection with univ
     */
    interUniv { /* proved */
        \find (inter1(R1,univ))
        \replacewith (R1)
        \heuristics (concrete)
        // immediate
        \displayname "inter_concrete"
    };
    interUniv_ { /* proved */
        \find (inter1(univ,R1))
        \replacewith (R1)
        \heuristics (concrete)
        \displayname "inter_concrete"
    };

////////////////////////////////////////////////
////////////////////////////////////////////////
//  join
////////////////////////////////////////////////
////////////////////////////////////////////////

    /*
     * join with none
     */
    join1x2None { /* proved */
        \find (join1x2(none,R2))
        \replacewith (none)
        \heuristics (concrete)
        // immediate
        \displayname "join_concrete"
    };
    join1x2None_ { /* proved */
        \find (join1x2(R1,none2))
        \replacewith (none)
        \heuristics (concrete)
        // immediate
        \displayname "join_concrete"
    };
    join2x1None { /* proved */
        \find (join2x1(none2,R1))
        \replacewith (none)
        \heuristics (concrete)
        // immediate
        \displayname "join_concrete"
    };
    join2x1None_ { /* proved */
        \find (join2x1(R2,none))
        \replacewith (none)
        \heuristics (concrete)
        // immediate
        \displayname "join_concrete"
    };
    join2x2None { /* proved */
        \find (join2x2(none2,R2))
        \replacewith (none2)
        \heuristics (concrete)
        // immediate
        \displayname "join_concrete"
    };
    join2x2None_ { /* proved */
        \find (join2x2(R2,none2))
        \replacewith (none2)
        \heuristics (concrete)
        // immediate
        \displayname "join_concrete"
    };
    join1x3None { /* proved */
        \find (join1x3(none,R3))
        \replacewith (none2)
        \heuristics (concrete)
        // immediate
        \displayname "join_concrete"
    };
    join1x3None_ { /* proved */
        \find (join1x3(R1,none3))
        \replacewith (none2)
        \heuristics (concrete)
        // immediate
        \displayname "join_concrete"
    };
    join3x1None { /* proved */
        \find (join3x1(none3,R1))
        \replacewith (none2)
        \heuristics (concrete)
        // immediate
        \displayname "join_concrete"
    };
    join3x1None_ { /* proved */
        \find (join3x1(R3,none))
        \replacewith (none2)
        \heuristics (concrete)
        // immediate
        \displayname "join_concrete"
    };

    /*
     * join with iden
     */
    join1x2iden { /* proved */
        \find (join1x2(R1,iden))
        \replacewith (R1)
        \heuristics (concrete)
        // immediate
        \displayname "join_concrete"
    };
    join2x2iden { /* proved */
        \find (join2x2(R2,iden))
        \replacewith (R2)
        \heuristics (concrete)
        // immediate
        \displayname "join_concrete"
    };
    join2x1iden { /* proved */
        \find (join2x1(iden,R1))
        \replacewith (R1)
        \heuristics (concrete)
        // immediate
        \displayname "join_concrete"
    };
    join2x2iden_ { /* proved */
        \find (join2x2(iden,R2))
        \replacewith (R2)
        \heuristics (concrete)
        // immediate
        \displayname "join_concrete"
    };

////////////////////////////////////////////////
////////////////////////////////////////////////
//  transp
////////////////////////////////////////////////
////////////////////////////////////////////////
    /*
     * transposition of none
     */
    transpNone { /* proved */
        \find (transp(none2))
        \replacewith (none2)
        \heuristics (simplify)
        \displayname "transp_concrete"
    };

    /*
     * transposition of iden
     */
    transpIden { /* proved */
        \find (transp(iden))
        \replacewith (iden)
        \heuristics (simplify)
        \displayname "transp_concrete"
    };



//////////////////////////////////////////////////
//////////////////////////////////////////////////
// join + transp
//////////////////////////////////////////////////
//////////////////////////////////////////////////
    joinTransp21 { /* proved */
        \find (join1x2(R1,transp(S2)))
        \replacewith (join2x1(S2,R1))
        \heuristics (simplify)
        \displayname "join_transpose_simplify"
    };
    joinTransp12 { /* proved */
        \find (join2x1(transp(R2),S1))
        \replacewith (join1x2(S1,R2))
        \heuristics (simplify)
        \displayname "join_transpose_simplify"
    };
//////////////////////////////////////////////////
//////////////////////////////////////////////////
// join + union + sin
//////////////////////////////////////////////////
//////////////////////////////////////////////////
    unionJoinSin { /* proved */
        \find (join1x2(sin(a),union2(R2,S2)))
        \replacewith (union1(join1x2(sin(a),R2),join1x2(sin(a),S2)))
        \heuristics (normalization2)
        \displayname "distribute_join_union"
    };
    unionJoinSin2 { /* proved */
        \find (join1x3(sin(a),union3(R3,S3)))
        \replacewith (union2(join1x3(sin(a),R3),join1x3(sin(a),S3)))
        \heuristics (normalization2)
        \displayname "distribute_join_union"
    };
    unionJoinSin3 { /* proved */
        \find (join3x1(union3(R3,S3),sin(a)))
        \replacewith (union2(join3x1(R3,sin(a)),join3x1(S3,sin(a))))
        \heuristics (normalization2)
        \displayname "distribute_join_union"
    };
    unionJoinSin4 { /* proved */
        \find (join2x1(union2(R2,S2),sin(a)))
        \replacewith (union1(join2x1(R2,sin(a)),join2x1(S2,sin(a))))
        \heuristics (normalization2)
        \displayname "distribute_join_union"
    };
//////////////////////////////////////////////////
//////////////////////////////////////////////////
// join + inter + sin
//////////////////////////////////////////////////
//////////////////////////////////////////////////
    interJoinSin1 { /* proved */
        \find (join1x2(sin(a),inter2(R2,S2)))
        \replacewith (inter1(join1x2(sin(a),R2),join1x2(sin(a),S2)))
        \heuristics (normalization2)
        \displayname "distribute_join_inter"
    };
    interJoinSin2 { /* proved */
        \find (join1x3(sin(a),inter3(R3,S3)))
        \replacewith (inter2(join1x3(sin(a),R3),join1x3(sin(a),S3)))
        \heuristics (normalization2)
        \displayname "distribute_join_inter"
    };
    interJoinSin3 { /* proved */
        \find (join2x1(inter2(R2,S2),sin(a)))
        \replacewith (inter1(join2x1(R2,sin(a)),join2x1(S2,sin(a))))
        \heuristics (normalization2)
        \displayname "distribute_join_inter"
    };
    interJoinSin4 { /* proved */
        \find (join3x1(inter3(R3,S3),sin(a)))
        \replacewith (inter2(join3x1(R3,sin(a)),join3x1(S3,sin(a))))
        \heuristics (normalization2)
        \displayname "distribute_join_inter"
    };

//////////////////////////////////////////////////
//////////////////////////////////////////////////
// join + diff + sin
//////////////////////////////////////////////////
//////////////////////////////////////////////////
    diffJoinSin1 { /* proved */
        \find (join1x2(sin(a),diff2(R2,S2)))
        \replacewith (diff1(join1x2(sin(a),R2),join1x2(sin(a),S2)))
        \heuristics (normalization2)
        \displayname "distribute_join_diff"
    };
    diffJoinSin2 { /* proved */
        \find (join1x3(sin(a),diff3(R3,S3)))
        \replacewith (diff2(join1x3(sin(a),R3),join1x3(sin(a),S3)))
        \heuristics (normalization2)
        \displayname "distribute_join_diff"
    };
    diffJoinSin3 { /* proved */
        \find (join2x1(diff2(R2,S2),sin(a)))
        \replacewith (diff1(join2x1(R2,sin(a)),join2x1(S2,sin(a))))
        \heuristics (normalization2)
        \displayname "distribute_join_diff"
    };
    diffJoinSin4 { /* proved */
        \find (join3x1(diff3(R3,S3),sin(a)))
        \replacewith (diff2(join3x1(R3,sin(a)),join3x1(S3,sin(a))))
        \heuristics (normalization2)
        \displayname "distribute_join_diff"
    };

//////////////////////////////////////////////////
//////////////////////////////////////////////////
// join + prod + sin
//////////////////////////////////////////////////
//////////////////////////////////////////////////
    prodJoinSin { /* proved */
        \find (join1x2(sin(a),prod1x1(R1,S1)))
        \replacewith (\if(in(a,R1)) \then (S1)
                                    \else (none))
        \heuristics (normalization2)
        \displayname "join_prod_simplify"
    };
    prodJoinSin2 { /* proved */
        \find (join1x3(sin(a),prod1x2(R1,S2)))
        \replacewith (\if(in(a,R1)) \then (S2)
                                    \else (none2))
        \heuristics (normalization2)
        \displayname "join_prod_simplify"
    };
    prodJoinSin3 { /* proved */
        \find (join2x1(prod1x1(R1,S1),sin(a)))
        \replacewith (\if(in(a,S1)) \then (R1)
                                    \else (none))
        \heuristics (normalization2)
        \displayname "join_prod_simplify"
    };
    prodJoinSin4 { /* proved */
        \find (join3x1(prod2x1(R2,S1),sin(a)))
        \replacewith (\if(in(a,S1)) \then (R2)
                                    \else (none2))
        \heuristics (normalization2)
        \displayname "join_prod_simplify"
    };
//////////////////////////////////////////////////
//////////////////////////////////////////////////
// join + domRestr + sin
//////////////////////////////////////////////////
//////////////////////////////////////////////////
    domRestrJoinSin { /* proved */
        \find (join1x2(sin(a),domRestr2(R1,S2)))
        \replacewith (\if(in(a,R1)) \then (join1x2(sin(a),S2))
                                    \else (none))
        \heuristics (normalization2)
        \displayname "join_domRestr_simplify"
    };
    domRestrJoinSin2 { /* proved */
        \find (join1x3(sin(a),domRestr3(R1,S3)))
        \replacewith (\if(in(a,R1)) \then (join1x3(sin(a),S3))
                                    \else (none2))
        \heuristics (normalization2)
        \displayname "join_domRestr_simplify"
    };
    domRestrJoinSin3 { /* proved */
        \find (join2x1(domRestr2(R1,S2),sin(a)))
        \replacewith (inter1(R1,join2x1(S2,sin(a))))
        \heuristics (normalization2)
        \displayname "join_domRestr_simplify"
    };
    domRestrJoinSin4 { /* proved */
        \find (join3x1(domRestr3(R1,S3),sin(a)))
        \replacewith (domRestr2(R1,join3x1(S3,sin(a))))
        \heuristics (normalization2)
        \displayname "join_domRestr_distribute"
    };
//////////////////////////////////////////////////
//////////////////////////////////////////////////
// join + rangeRestr + sin
//////////////////////////////////////////////////
//////////////////////////////////////////////////
    rangeRestrJoinSin { /* proved */
        \find (join2x1(rangeRestr2(R2,S1),sin(a)))
        \replacewith (\if(in(a,S1)) \then (join2x1(R2,sin(a)))
                                    \else (none))
        \heuristics (normalization2)
        \displayname "join_rangeRestr_simplify"
    };
    rangeRestrJoinSin2 { /* proved */
        \find (join3x1(rangeRestr3(R3,S1),sin(a)))
        \replacewith (\if(in(a,S1)) \then (join3x1(R3,sin(a)))
                                    \else (none2))
        \heuristics (normalization2)
        \displayname "join_rangeRestr_simplify"
    };
    rangeRestrJoinSin3 { /* proved */
        \find (join1x2(sin(a),rangeRestr2(R2,S1)))
        \replacewith (inter1(join1x2(sin(a),R2),S1))
        \heuristics (normalization2)
        \displayname "join_rangeRestr_simplify"
    };
    rangeRestrJoinSin4 { /* proved */
        \find (join1x3(sin(a),rangeRestr3(R3,S1)))
        \replacewith (rangeRestr2(join1x3(sin(a),R3),S1))
        \heuristics (normalization2)
        \displayname "join_rangeRestr_distribute"
    };

}