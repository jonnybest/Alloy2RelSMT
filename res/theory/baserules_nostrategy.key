/**
 * A set of very basic lemmas. Often trivial replacements for an
 * axiom, but better suited for actual usage within a proof
 */

\schemaVariables {
    \term Relation R,S;
    \term Rel1 R1,S1,T1,U1;
    \term Rel2 R2,S2,T2,U2;
    \term Rel3 R3,S3,T3,U3;
    \term Tuple t;
    \term Atom a,b,c,d,e,f;
    \term Tuple2 a2,b2;
    \term Tuple3 a3,b3;
    \term int n;
    \variables Atom va,vb,vc,vd,ve,vf;
    \variables int vn;
    \variables Tuple vt,vu;
    \variables Tuple2 va2,vb2;
    \variables Tuple3 va3,vb3;
    \formula phi;
    \skolemTerm Atom nva,nvb,nvc;
}

\rules {

    ////////////////
    ////////////////
    //// AXIOMS ////
    ////////////////
    ////////////////

    /*********************************
     * axiomatizing the constructors *
     *********************************/
    tupleCons2 { // proven to follow from theory
        \find (a2)
        \varcond (\notFreeIn(va,a2),\notFreeIn(vb,a2))
        \add (\exists va; \exists vb; a2 = binary(va,vb) ==>)
    };
    tupleCons3 { // proven to follow from theory
        \find (a3)
        \varcond (\notFreeIn(va,a3),\notFreeIn(vb,a3),\notFreeIn(vc,a3))
        \add (\exists va;
                  \exists vb; \exists vc; a3 = ternary(va,vb,vc) ==>)
    };
    // Axiomatizing the equality of constructor terms. Cases where
    // tuples of different arities are compared are left
    // underspecified. Also underspecified is the comparision of
    // terms other than constructor terms.
    tupleEquality2 { // proven to follow from theory
        \find (binary(a,b) = binary(c,d))
        \replacewith (a = c & b = d)
        \heuristics (simplify)
        // simplify
    };
    tupleEquality3 { // proven to follow from theory
        \find (ternary(a,b,c) = ternary(d,e,f))
        \replacewith (a = d & b = e & c = f)
        \heuristics (simplify)
        // simplify
    };

    /*************************
     * axiomatizing equality *
     *************************/
    // Two relations of the same arity are equal iff they contain
    // the same tuples. The case of equality on relations with
    // different arities is left underspecified.
    relationEquality1 { // proven to follow from theory
        \find (R1 = S1)
        \varcond (\notFreeIn(va,R1,S1))
        \replacewith (\forall va; (in(va,R1) <-> in(va,S1)))
        \heuristics (simplify_enlarging)
    };
    relationEquality2 { // proven to follow from theory
        \find (R2 = S2)
        \varcond (\notFreeIn(va,R2,S2), \notFreeIn(vb,R2,S2))
        \replacewith (\forall va;
                        \forall vb; (    in(binary(va,vb),R2)
                                     <-> in(binary(va,vb),S2)))
         \heuristics (simplify_enlarging)
    };
    relationEquality3 { // proven to follow from theory
        \find (R3 = S3)
        \varcond (\notFreeIn(va,R3,S3), \notFreeIn(vb,R3,S3),
                  \notFreeIn(vc,R3,S3))
        \replacewith (\forall va;
                        \forall vb;
                          \forall vc; (    in(ternary(va,vb,vc),R3)
                                       <-> in(ternary(va,vb,vc),S3)))
        \heuristics (simplify_enlarging)
    };

    /*************************************
     * axiomatizing the subset predicate *
     *************************************/
    // Define the subrel predicate for every arity. The case when
    // relations of different arities are compared is left
    // underspecified.
    subrel1Def {
        \find (subrel(R1,S1))
        \varcond (\notFreeIn(va,R1,S1))
        \replacewith (\forall va; (in(va,R1) -> in(va,S1)))
        \heuristics (simplify_enlarging)
    };
    subrel2Def {
        \find (subrel(R2,S2))
        \varcond (\notFreeIn(va,R2,S2), \notFreeIn(vb,R2,S2))
        \replacewith (\forall va;
                        \forall vb; (   in(binary(va,vb),R2)
                                     -> in(binary(va,vb),S2)))
        \heuristics (simplify_enlarging)
    };
    subrel3Def {
        \find(subrel(R3,S3))
        \varcond (\notFreeIn(va,R3,S3), \notFreeIn(vb,R3,S3),
                  \notFreeIn(vc,R3,S3))
        \replacewith (\forall va;
                        \forall vb;
                          \forall vc; (   in(ternary(va,vb,vc),R3)
                                       -> in(ternary(va,vb,vc),S3)))
        \heuristics (simplify_enlarging)
    };

    /*******************************************
     * axiomatizing the disjointness predicate *
     *******************************************/
    // Define disjointness of relations for every arity. Again,
    // arity mismatches are left underspecified
    disj1Def {
        \find(disj(R1,S1))
        \varcond (\notFreeIn(va,R1,S1))
        \replacewith (\forall va; (!in(va,R1) | !in(va,S1)))
        \heuristics (simplify_enlarging)
    };
    disj2Def {
        \find(disj(R2,S2))
        \varcond (\notFreeIn(va,R2,S2), \notFreeIn(vb,R2,S2))
        \replacewith (\forall va;
                        \forall vb; (  !in(binary(va,vb),R2)
                                     | !in(binary(va,vb),S2)))
        \heuristics (simplify_enlarging)
    };
    disj3Def {
        \find(disj(R3,S3))
        \varcond (\notFreeIn(va,R3,S3), \notFreeIn(vb,R3,S3),
                  \notFreeIn(vc,R3,S3))
        \replacewith (\forall va;
                        \forall vb;
                          \forall vc; (  !in(ternary(va,vb,vc),R3)
                                       | !in(ternary(va,vb,vc),S3)))
        \heuristics (simplify_enlarging)
    };

    /**********************************
     * axiomatizing the join operator *
     **********************************/
    joinDef1x2 { // proved to follow from theory
        \find (in(b,join1x2(R1,S2)))
        \varcond (\notFreeIn(va,S2,b,R1))
        \replacewith (\exists va; (in(va,R1) & in(binary(va,b),S2)))
        \heuristics (simplify_enlarging)
    };
    joinDef2x1 {
        \find (in(a,join2x1(R2,S1)))
        \varcond (\notFreeIn(vb,R2,S1,a))
        \replacewith (\exists vb; (in(vb,S1) & in(binary(a,vb),R2)))
        \heuristics (simplify_enlarging)
    };
    joinDef1x3 {
        \find (in(binary(b,c),join1x3(R1,S3)))
        \varcond (\notFreeIn(va,R1,S3,b,c))
        \replacewith (\exists va; (  in(va,R1)
                                   & in(ternary(va,b,c),S3)))
        \heuristics (simplify_enlarging)
    };
    joinDef3x1 {
        \find (in(binary(b,c),join3x1(R3,S1)))
        \varcond (\notFreeIn(va,R3,S1,b,c))
        \replacewith (\exists va; (  in(va,S1)
                                   & in(ternary(b,c,va),R3)))
        \heuristics (simplify_enlarging)
    };
    joinDef2x2 {
        \find(in(binary(a,c),join2x2(R2,S2)))
        \varcond (\notFreeIn(vb,R2,S2,a,c))
        \replacewith (\exists vb; (  in(binary(a,vb),R2)
                                   & in(binary(vb,c),S2)))
        \heuristics (simplify_enlarging)
    };
    joinDef2x3 {
        \find(in(ternary(a,c,d),join2x3(R2,S3)))
        \varcond(\notFreeIn(vb,R2,S3,a,c,d))
        \replacewith (\exists vb; (  in(binary(a,vb),R2)
                                   & in(ternary(vb,c,d),S3)))
        \heuristics (simplify_enlarging)
    };
    joinDef3x2 {
        \find(in(ternary(a,b,d),join3x2(R3,S2)))
        \varcond(\notFreeIn(vc,R3,S2,a,b,d))
        \replacewith (\exists vc; (  in(ternary(a,b,vc),R3)
                                   & in(binary(vc,d),S2)))
        \heuristics (simplify_enlarging)
    };

    /**********************************
     * axiomatizing the arrow product *
     **********************************/
    prodDef1x1 {
        \find (in(binary(a,b),prod1x1(R1,S1)))
        \replacewith (in(a,R1) & in(b,S1))
        \heuristics (simplify_enlarging)
        // enlarging
    };
    prodDef1x2 { // proved to follow from theory
        \find (in(ternary(a,b,c),prod1x2(R1,S2)))
        \replacewith (in(a,R1) & in(binary(b,c),S2))
        \heuristics (simplify_enlarging)
        // enlarging
    };
    prodDef2x1 {
        \find(in(ternary(a,b,c),prod2x1(R2,S1)))
        \replacewith (in(binary(a,b),R2) & in(c,S1))
        \heuristics (simplify_enlarging)
        // enlarging
    };

    /***********************************
     * axiomatizing the union operator *
     ***********************************/
    union1Def {
        \find (in(a,union1(R1,S1)))
        \replacewith (in(a,R1) | in(a,S1))
        \heuristics (simplify_enlarging)
        // enlarging
    };
    union2Def { // proved to follow from theory
        \find (in(a2,union2(R2,S2)))
        \replacewith (in(a2,R2) | in(a2,S2))
        \heuristics (simplify_enlarging)
        // enlarging
    };
    union3Def {
        \find (in(a3,union3(R3,S3)))
        \replacewith (in(a3,R3) | in(a3,S3))
        \heuristics (simplify_enlarging)
        // enlarging
    };

    /****************************************
     * axiomatizing the difference operator *
     ****************************************/
   diff1Def {
        \find (in(a,diff1(R1,S1)))
        \replacewith (in(a,R1) & !in(a,S1))
        \heuristics (simplify_enlarging)
        // enlarging
    };
    diff2Def {
        \find (in(a2,diff2(R2,S2)))
        \replacewith (in(a2,R2) & !in(a2,S2))
        \heuristics (simplify_enlarging)
        // enlarging
    };
    diff3Def {
        \find (in(a3,diff3(R3,S3)))
        \replacewith (in(a3,R3) & !in(a3,S3))
        \heuristics (simplify_enlarging)
        // enlarging
    };
      
    /******************************************
     * axiomatizing the intersection operator *
     ******************************************/
    inter1Def {
        \find (in(a,inter1(R1,S1)))
        \replacewith (in(a,R1) & in(a,S1))
        \heuristics (simplify_enlarging)
        // enlarging
    };
    inter2Def {
        \find (in(a2,inter2(R2,S2)))
        \replacewith (in(a2,R2) & in(a2,S2))
        \heuristics (simplify_enlarging)
        // enlarging
    };
    inter3Def {
        \find (in(a3,inter3(R3,S3)))
        \replacewith (in(a3,R3) & in(a3,S3))
        \heuristics (simplify_enlarging)
        // enlarging
    };

    /**************************************
     * axiomatizing the override operator *
     **************************************/
    overr1Def {
        \find (overr1(R1,S1))
        \replacewith (union1(R1,S1))
        \heuristics (simplify)
        // simplify
    };
    overr2Def {
        \find (in(binary(a,b),overr2(R2,S2)))
        \varcond (\notFreeIn(vc,a,b,R2,S2))
        \replacewith (  in(binary(a,b),S2)
                      | (  in(binary(a,b),R2)
                         & \forall vc; !in(binary(a,vc),S2)))
        \heuristics (simplify_enlarging)
        // enlarging
    };
    overr3Def {
        \find (in(ternary(a,b,c),overr3(R3,S3)))
        \varcond (\notFreeIn(vd,a,b,c,R3,S3),
                  \notFreeIn(ve,a,b,c,R3,S3))
        \replacewith (  in(ternary(a,b,c),S3)
                      | (  in(ternary(a,b,c),R3)
                         & \forall vd;
                             \forall ve; !in(ternary(a,vd,ve),S3)))
        \heuristics (simplify_enlarging)
        // enlarging
    };

    /***********************************
     * axiomatizing the lone predicate *
     ***********************************/
    loneDef1 {
        \find(lone(R1))
        \varcond(\notFreeIn(va,R1), \notFreeIn(vb,R1))
        \replacewith (\forall va;
                        \forall vb; (in(va,R1) & in(vb,R1) -> va = vb))
        \heuristics (simplify_enlarging)
    };
    loneDef2 {
        \find(lone(R2))
        \varcond(\notFreeIn(va2,R2), \notFreeIn(vb2,R2))
        \replacewith (\forall va2;
                        \forall vb2; (in(va2,R2) & in(vb2,R2) -> va2 = vb2))
        \heuristics (simplify_enlarging)
    };
    loneDef3 {
        \find(lone(R3))
        \varcond(\notFreeIn(va3,R3), \notFreeIn(vb3,R3))
        \replacewith (\forall va3;
                        \forall vb3; (in(va3,R3) & in(vb3,R3) -> va3 = vb3))
        \heuristics (simplify_enlarging)
    };

    /**********************************
     * axiomatizing the one predicate *
     **********************************/
    oneDef1 {
        \find(one(R1))
        \varcond(\notFreeIn(va,R1))
        \replacewith (\exists va; in(va,R1) & lone(R1))
        \heuristics (simplify_enlarging)
    };
    oneDef2 {
        \find(one(R2))
        \varcond(\notFreeIn(va2,R2))
        \replacewith (\exists va2; in(va2,R2) & lone(R2))
        \heuristics (simplify_enlarging)
    };
    oneDef3 {
        \find(one(R3))
        \varcond(\notFreeIn(va3,R3))
        \replacewith (\exists va3; in(va3,R3) & lone(R3))
        \heuristics (simplify_enlarging)
    };

    /***********************************
     * axiomatizing the some predicate *
     ***********************************/
    someDef1 {
        \find (some(R1))
        \varcond (\notFreeIn(va,R1))
        \replacewith (\exists va; (in(va,R1)))
        \heuristics (simplify_enlarging)
    };
    someDef2 {
        \find (some(R2))
        \varcond (\notFreeIn(va,R2), \notFreeIn(vb,R2))
        \replacewith (\exists va; \exists vb; (in(binary(va,vb),R2)))
        \heuristics (simplify_enlarging)
    };
    someDef3 {
        \find (some(R3))
        \varcond (\notFreeIn(va,R3), \notFreeIn(vb,R3),
                  \notFreeIn(vc,R3))
        \replacewith (\exists va;
                        \exists vb;
                          \exists vc; (in(ternary(va,vb,vc),R3)))
        \heuristics (simplify_enlarging)
    };

    /***************************************
     * axiomatizing the transpose operator *
     ***************************************/
    transpDef { // proved to follow from theory
        \find(in(binary(a,b),transp(R2)))
        \replacewith (in(binary(b,a),R2))
        \heuristics(simplify)
        // simplify
    };

    /************************************************
     * axiomatizing the domain restriction operator *
     ************************************************/
    domRestr1Def {
        \find (domRestr1(R1,S1))
        \replacewith (inter1(R1,S1))
        \heuristics (simplify)
        // simplify
    };
    domRestr2Def {
        \find (in(binary(a,b),domRestr2(R1,S2)))
        \replacewith (in(binary(a,b),S2) & in(a,R1))
        \heuristics (simplify_enlarging)
        // enlarging
    };
    domRestr3Def {
        \find (in(ternary(a,b,c),domRestr3(R1,S3)))
        \replacewith (in(ternary(a,b,c),S3) & in(a,R1))
        \heuristics (simplify_enlarging)
        // enlarging
    };

    /***********************************************
     * axiomatizing the range restriction operator *
     ***********************************************/
    rangeRestr1Def {
        \find (rangeRestr1(R1,S1))
        \replacewith (inter1(R1,S1))
        \heuristics (simplify)
        // simplify
    };
    rangeRestr2Def {
        \find (in(binary(a,b),rangeRestr2(R2,S1)))
        \replacewith (in(binary(a,b),R2) & in(b,S1))
        \heuristics (simplify_enlarging)
        // enlarging
    };
    rangeRestr3Def {
        \find (in(ternary(a,b,c),rangeRestr3(R3,S1)))
        \replacewith (in(ternary(a,b,c),R3) & in(c,S1))
        \heuristics (simplify_enlarging)
        // enlarging
    };

    /***************************************
     * axiomatizing the empty set constant *
     ***************************************/
    noneDef {
        \find (in(a,none))
        \replacewith (false)
        \heuristics (simplify)
        // simplify
    };
    none2Def {
        \find (in(a2,none2))
        \replacewith (false)
        \heuristics (simplify)
        // simplify
    };
    none3Def {
        \find (in(a3,none3))
        \replacewith (false)
        \heuristics (simplify)
        // simplify
    };

    /*******************************************
     * axiomatizing the universal set constant *
     *******************************************/
    univDef {
        \find (in(a,univ))
        \replacewith (true)
        \heuristics (simplify)
        // simplify
    };

    /***********************************************
     * axiomatizing the identity relation constant *
     ***********************************************/
    idenDef {
        \find (in(binary(a,b),iden))
        \replacewith (a = b)
        \heuristics (simplify)
        // simplify
    };

    /***************************************************
     * axiomatizing the singleton relation constructor *
     ***************************************************/
    sinDef {
        \find (in(b,sin(a)))
        \replacewith (b = a)
        \heuristics (simplify)
        // simplify
    };
    sin2Def {
        \find (in(b2,sin2(a2)))
        \replacewith (b2 = a2)
        \heuristics (simplify)
        // simplify
    };
    sin3Def {
        \find (in(b3,sin3(a3)))
        \replacewith (b3 = a3)
        \heuristics (simplify)
        // simplify
    };

    /***********************************
     * axiomatizing transitive closure *
     ***********************************/
    iterJoinStep {
        \find (iterJoin(R2,n))
        \replacewith (\if (n > 0)
                      \then (union2(iterJoin(R2,n-1),join2x2(R2,iterJoin(R2,n-1))))
                      \else (iterJoin(R2,n)))
        \heuristics (late)
    };
    iterJoinBase { // proved to follow from theory
        \find (iterJoin(R2,0))
        \replacewith (R2)
        \heuristics (simplify)
    };
    transClosDef { // proved to follow from theory
        \find (in(a2,transClos(R2)))
        \varcond (\notFreeIn(vn,R2), \notFreeIn(vn,a2))
        \replacewith (\exists vn; (vn >= 0 & in(a2,iterJoin(R2,vn))))
        \heuristics (simplify_enlarging)
    };
    reflTransClosDef {
        \find (reflTransClos(R2))
        \replacewith (union2(iden,transClos(R2)))
        \heuristics (simplify_enlarging)
    };

    /*******************************
     * axiomatizing comprehensions *
     *******************************/
    comprDef1 {
        \find (in(a,compr1{va;}(phi)))
        \varcond (\notFreeIn(va,a))
        \replacewith ({\subst va; a}phi)
        \heuristics (simplify)
    };
    comprDef2 {
        \find (in(binary(a,b),compr2{va;}(bind{vb;}(phi))))
        \varcond (\notFreeIn(va,a,b), \notFreeIn(vb,a,b))
        \replacewith ({\subst va; a}{\subst vb; b}phi)
        \heuristics (simplify)
    };
    compr3Def {
        \find (in(ternary(a,b,c),compr3{va;}(bind{vb;}(bind{vc;}(phi)))))
        \varcond (\notFreeIn(va,a,b,c), \notFreeIn(vb,a,b,c),
                  \notFreeIn(vc,a,b,c))
        \replacewith ({\subst va; a}{\subst vb; b}{\subst vc; c}phi)
        \heuristics (simplify)
    };


    /////////////////////////
    /////////////////////////
    //// LEMMATA, PROVEN ////
    /////////////////////////
    /////////////////////////

    /********************
     * rewrite equality *
     ********************/
    relationEqualityRight1 { /* proved */
        \find (==> R1 = S1)
        \varcond (\notFreeIn(va,R1,S1))
        \replacewith (==> \forall va; (in(va,R1) <-> in(va,S1)))
        // enlarging
        \displayname "rewrite_equality"
    };
    relationEqualityRight2 { /* proved */
        \find (==> R2 = S2)
        \varcond (\notFreeIn(va,R2,S2), \notFreeIn(vb,R2,S2))
        \replacewith (==> \forall va;
                        \forall vb; (    in(binary(va,vb),R2)
                                     <-> in(binary(va,vb),S2)))
        // enlarging
        \displayname "rewrite_equality"
    };
    relationEqualityRight3 { /* proved */
        \find (==> R3 = S3)
        \varcond (\notFreeIn(va,R3,S3), \notFreeIn(vb,R3,S3),
                  \notFreeIn(vc,R3,S3))
        \replacewith (==> \forall va;
                        \forall vb;
                          \forall vc; (    in(ternary(va,vb,vc),R3)
                                       <-> in(ternary(va,vb,vc),S3)))
        // enlarging
        \displayname "rewrite_equality"
    };

    /******************
     * rewrite subrel *
     ******************/
    subrelLeft1 { /* proved */
        \find (subrel(R1,S1) ==>)
        \varcond (\notFreeIn(va,R1,S1))
        \replacewith (\forall va; (in(va,R1) -> in(va,S1)) ==>)
        \displayname "subrel_rewrite"
    };
    subrelLeft2 { /* proved */
        \find (subrel(R2,S2) ==>)
        \varcond (\notFreeIn(va,R2,S2), \notFreeIn(vb,R2,S2))
        \replacewith (\forall va;
                        \forall vb; (   in(binary(va,vb),R2)
                                     -> in(binary(va,vb),S2)) ==>)
        \displayname "subrel_rewrite"
    };
    subrelLeft3 { /* proved */
        \find(subrel(R3,S3) ==>)
        \varcond (\notFreeIn(va,R3,S3), \notFreeIn(vb,R3,S3),
                  \notFreeIn(vc,R3,S3))
        \replacewith (\forall va;
                        \forall vb;
                          \forall vc; (   in(ternary(va,vb,vc),R3)
                                       -> in(ternary(va,vb,vc),S3))
                      ==>)
        \displayname "subrel_rewrite"
    };

    // rewrite subrel on right-hand side of the sequent
    subrelRight1 { /* proved */
        \find (==> subrel(R1,S1))
        \varcond (\notFreeIn(va,R1,S1))
        \replacewith (==> \forall va; (in(va,R1) -> in(va,S1)))
        // enlarging
        \displayname "subrelRight"
    };
    subrelRight2 { /* proved */
        \find (==> subrel(R2,S2))
        \varcond (\notFreeIn(va,R2,S2), \notFreeIn(vb,R2,S2))
        \replacewith (==> \forall va;
                        \forall vb; (   in(binary(va,vb),R2)
                                     -> in(binary(va,vb),S2)))
        // enlarging
        \displayname "subrelRight"
    };
    subrelRight3 { /* proved */
        \find(==> subrel(R3,S3))
        \varcond (\notFreeIn(va,R3,S3), \notFreeIn(vb,R3,S3),
                  \notFreeIn(vc,R3,S3))
        \replacewith (==> \forall va;
                        \forall vb;
                          \forall vc; (   in(ternary(va,vb,vc),R3)
                                       -> in(ternary(va,vb,vc),S3)))
        // enlarging
        \displayname "subrelRight"
    };

    /******************
     * rewriting disj *
     ******************/
    disjLeft1 { /* proved */
        \find(disj(R1,S1) ==>)
        \varcond (\notFreeIn(va,R1,S1))
        \replacewith (\forall va; (!in(va,R1) | !in(va,S1)) ==>)
        \displayname "rewrite_disj"
    };
    disjLeft2 { /* proved */
        \find(disj(R2,S2) ==>)
        \varcond (\notFreeIn(va,R2,S2), \notFreeIn(vb,R2,S2))
        \replacewith (\forall va;
                        \forall vb; (  !in(binary(va,vb),R2)
                                     | !in(binary(va,vb),S2)) ==>)
        \displayname "rewrite_disj"
    };
    disjLeft3 { /* proved */
        \find(disj(R3,S3) ==>)
        \varcond (\notFreeIn(va,R3,S3), \notFreeIn(vb,R3,S3),
                  \notFreeIn(vc,R3,S3))
        \replacewith (\forall va;
                        \forall vb;
                          \forall vc; (  !in(ternary(va,vb,vc),R3)
                                       | !in(ternary(va,vb,vc),S3))
                      ==>)
        \displayname "rewrite_disj"
    };
    disjRight1 { /* proved */
        \find(==> disj(R1,S1))
        \varcond (\notFreeIn(va,R1,S1))
        \replacewith (==> \forall va; (!in(va,R1) | !in(va,S1)))
        // enlarging
        \displayname "disjRight"
    };
    disjRight2 { /* proved */
        \find(==> disj(R2,S2))
        \varcond (\notFreeIn(va,R2,S2), \notFreeIn(vb,R2,S2))
        \replacewith (==> \forall va;
                        \forall vb; (  !in(binary(va,vb),R2)
                                     | !in(binary(va,vb),S2)))
        // enlarging
        \displayname "disjRight"
    };
    disjRight3 { /* proved */
        \find(==> disj(R3,S3))
        \varcond (\notFreeIn(va,R3,S3), \notFreeIn(vb,R3,S3),
                  \notFreeIn(vc,R3,S3))
        \replacewith (==> \forall va;
                        \forall vb;
                          \forall vc; (  !in(ternary(va,vb,vc),R3)
                                       | !in(ternary(va,vb,vc),S3)))
        // enlarging
        \displayname "disjRight"
    };

    /*****************
     * rewriting one *
     *****************/
    oneLeftRewr1 { /* proved */
        \find (one(R1) ==>)
        \varcond (\notFreeIn(va,R1), \notFreeIn(vb,R1))
        \replacewith (\exists va; (  in(va,R1)
                                   & \forall vb;
                                       (in(vb,R1) -> va = vb)) ==>)
        \displayname "rewrite_one"
    };
    oneLeftRewr2 { /* proved */
        \find (one(R2) ==>)
        \varcond (\notFreeIn(va,R2), \notFreeIn(vb,R2),
                  \notFreeIn(vc,R2), \notFreeIn(vd,R2))
        \replacewith (\exists va;
                        \exists vb; (
                             in(binary(va,vb),R2)
                           & \forall vc;
                               \forall vd; (
                                  in(binary(vc,vd),R2)
                                  -> va = vc & vb = vd)) ==>)
        \displayname "rewrite_one"
    };
    oneLeftRewr3 { /* proved */
        \find (one(R3) ==>)
        \varcond (\notFreeIn(va,R3), \notFreeIn(vb,R3),
                  \notFreeIn(vc,R3), \notFreeIn(vd,R3),
                  \notFreeIn(ve,R3), \notFreeIn(vf,R3))
        \replacewith (\exists va;
                        \exists vb;
                          \exists vc; (
                               in(ternary(va,vb,vc),R3)
                             & \forall vd;
                                 \forall ve;
                                   \forall vf; (
                                      in(ternary(vd,ve,vf),R3)
                                      -> va = vd & vb = ve
                                         & vc = vf)) ==>)
        \displayname "rewrite_one"
    };

    oneRight1 { /* proved */
        \find (==> one(R1))
        \replacewith (==> some(R1) & lone(R1))
    };
    oneRight2 { /* proved */
        \find (==> one(R2))
        \replacewith (==> some(R2) & lone(R2))
    };
    oneRight3 { /* proved */
        \find (==> one(R3))
        \replacewith (==> some(R3) & lone(R3))
    };

    /******************
     * rewriting some *
     ******************/
    someLeft1 { /* proved */
        \find (some(R1) ==>)
        \varcond (\notFreeIn(va,R1))
        \replacewith (\exists va; (in(va,R1)) ==>)
        \heuristics (simplify_enlarging)
        // enlarging
        \displayname "rewrite_some"
    };
    someLeft2 { /* proved */
        \find (some(R2) ==>)
        \varcond (\notFreeIn(va,R2), \notFreeIn(vb,R2))
        \replacewith (\exists va; \exists vb; (in(binary(va,vb),R2)) ==>)
        \heuristics (simplify_enlarging)
        // enlarging
        \displayname "rewrite_some"
    };
    someLeft3 { /* proved */
        \find (some(R3) ==>)
        \varcond (\notFreeIn(va,R3), \notFreeIn(vb,R3),
                  \notFreeIn(vc,R3))
        \replacewith (\exists va;
                        \exists vb;
                          \exists vc; (in(ternary(va,vb,vc),R3)) ==>)
        \heuristics (simplify_enlarging)
        // enlarging
        \displayname "rewrite_some"
    };
    someRight1 { /* proved */
        \find (==> some(R1))
        \replacewith (R1 = none ==>)
        // enlarging
        \displayname "rewrite_some"
    };
    someRight2 { /* proved */
        \find (==> some(R2))
        \replacewith (R2 = none2 ==>)
        // enlarging
        \displayname "rewrite_some"
    };
    someRight3 { /* proved */
        \find (==> some(R3))
        \replacewith (R3 = none3 ==>)
        // enlarging
        \displayname "rewrite_some"
    };

    /******************
     * rewriting lone *
     ******************/
    loneLeftRewr1 { /* proved */
        \find (lone(R1) ==>)
        \varcond (\notFreeIn(va,R1), \notFreeIn(vb,R1))
        \replacewith (\forall va; \forall vb;
                        (in(va,R1) & in(vb,R1) -> va = vb) ==>)
        \heuristics (late)
        \displayname "rewrite_lone"
    };
    loneLeftRewr2 { /* proved */
        \find (lone(R2) ==>)
        \varcond (\notFreeIn(va,R2), \notFreeIn(vb,R2),
                  \notFreeIn(vc,R2), \notFreeIn(vd,R2))
        \replacewith (\forall va; \forall vb;
                        \forall vc; \forall vd; (
                            in(binary(va,vb),R2)
                          & in(binary(vc,vd),R2)
                          -> va = vc & vb = vd) ==>)
        \heuristics (late)
        \displayname "rewrite_lone"
    };
    loneLeftRewr3 { /* proved */
        \find (lone(R3) ==>)
        \varcond (\notFreeIn(va,R3), \notFreeIn(vb,R3),
                  \notFreeIn(vc,R3), \notFreeIn(vd,R3),
                  \notFreeIn(ve,R3), \notFreeIn(vf,R3))
        \replacewith (\forall va; \forall vb;
                        \forall vc; \forall vd;
                          \forall ve; \forall vf; (
                              in(ternary(va,vb,vc),R3)
                            & in(ternary(vd,ve,vf),R3)
                            -> va = vd & vb = ve & vc = vf) ==>)
        \heuristics (late)
        \displayname "rewrite_lone"
    };
    loneRight1 { /* proved */
        \find (==> lone(R1))
        \varcond (\notFreeIn(va,R1), \notFreeIn(vb,R1))
        \replacewith (==> \forall va; \forall vb;
                            (in(va,R1) & in(vb,R1) -> va = vb))
        \heuristics (simplify_enlarging)
        // enlarging
        \displayname "rewrite_lone"
    };
    loneRight2 { /* proved */
        \find (==> lone(R2))
        \varcond (\notFreeIn(va,R2), \notFreeIn(vb,R2),
                  \notFreeIn(vc,R2), \notFreeIn(vd,R2))
        \replacewith (==> \forall va; \forall vb;
                            \forall vc; \forall vd; (
                                in(binary(va,vb),R2)
                              & in(binary(vc,vd),R2)
                              -> va = vc & vb = vd))
        \heuristics (simplify_enlarging)
        // enlarging
        \displayname "rewrite_lone"
    };
    loneRight3 { /* proved */
        \find (==> lone(R3))
        \varcond (\notFreeIn(va,R3), \notFreeIn(vb,R3),
                  \notFreeIn(vc,R3), \notFreeIn(vd,R3),
                  \notFreeIn(ve,R3), \notFreeIn(vf,R3))
        \replacewith (==> \forall va; \forall vb;
                            \forall vc; \forall vd;
                              \forall ve; \forall vf; (
                                  in(ternary(va,vb,vc),R3)
                                & in(ternary(vd,ve,vf),R3)
                                -> va = vd & vb = ve & vc = vf))
        \heuristics (simplify_enlarging)
        // enlarging
        \displayname "rewrite_lone"
    };

}

