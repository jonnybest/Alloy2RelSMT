\functions {
    // the built-in signature containing all integer Atoms
    Rel1 Int;

    // cast integers to int atoms
    Atom i2a(int);
    // cast from an atom to an int
    int a2i(Atom);

    // the sum operator on sets
    int sum(Rel1);

    Rel2 nextInt;
}

\rules {
    removeCastInt2 {
        \schemaVar \term int i;
        \find (a2i(i2a(i)))
        \replacewith (i)
        \heuristics (simplify)
    };

    intCastInjective {
        \schemaVar \term int i,j;
        \find (i2a(i) = i2a(j))
        \replacewith (i = j)
        \heuristics (simplify)
    };

    intSigDef {
        \schemaVar \term Atom a;
        \schemaVar \variables int vn;
        \find (in(a,Int))
        \varcond (\notFreeIn(vn,a))
        \replacewith (\exists vn; a = i2a(vn))
        //\heuristics (simplify_enlarging, notTopLevel)
    };

    sumDef {
        \schemaVar \term Rel1 R;
        \schemaVar \variables int i;
        \find (sum(R))
        \varcond (\notFreeIn(i,R))
        \replacewith (\if (finite(R))
                      \then (bsum{i;}(0, card(R), \if (in(elem1(R,i),Int))
                                                  \then (a2i(elem1(R,i)))
                                                  \else (0)))
                      \else (sum(R)))
        \heuristics (late, noDuplicateApp)
    };

    nextIntDef {
        \schemaVar \term Atom a,b;
        \find (in(binary(a,b),nextInt))
        \replacewith (\if (in(a,Int) & in(b,Int))
                      \then (a2i(a)+1 = a2i(b))
                      \else (false))
        \heuristics (simplify_enlarging)
    };

//---
//lemmata
//---
    removeCastInt {
        \schemaVar \term Atom a;
        \assumes (in(a,Int) ==>)
        \find (i2a(a2i(a)))
        \replacewith (a)
        \heuristics (simplify)
    };
    removeCastIntEq {
        \schemaVar \term int i;
        \schemaVar \term Atom a;
        \assumes (i2a(i) = a ==>)
        \find (a2i(a))
        \replacewith (i)
        \heuristics (simplify)
    };
    intSigCast {
        \schemaVar \term int i;
        \find (in(i2a(i),Int))
        \replacewith (true)
        \heuristics (simplify, notTopLevelInAntec)
    };
    intSigTL {
        \schemaVar \term Atom a;
        \schemaVar \variables int vn;
        \find (in(a,Int) ==>)
        \varcond (\notFreeIn(vn,a))
        \add (\exists vn; a = i2a(vn) ==>)
        \heuristics (normalization, noDuplicateApp)
    };
    intSig {
        \schemaVar \term Atom a;
        \schemaVar \term int i;
        \assumes (i2a(i) = a ==>)
        \find (in(a,Int))
        \replacewith (true)
        \heuristics (simplify)
    };
    castInjEq {
        \schemaVar \term Atom a;
        \schemaVar \term int i,j;
        \assumes (i2a(i) = a ==>)
        \find (i2a(j) = a)
        \replacewith (j = i)
        \heuristics (simplify, focusNotInAssumes)
    };
    castInjEq2 {
        \schemaVar \term Atom a,b;
        \schemaVar \term int i,j;
        \assumes (i2a(i) = a, i2a(j) = b ==>)
        \find (a = b)
        \replacewith (i = j)
        \heuristics (simplify, focusNotInAssumes)
    };

    intTrivialRemove {
        \schemaVar \term int i;
        \schemaVar \variables int vn;
        \find (\exists vn; i2a(i) = i2a(vn) ==>)
        \varcond (\notFreeIn(vn,i))
        \replacewith (==>)
        \heuristics (concrete)
    };

    sumSin {
        \schemaVar \term int i;
        \find (sum(sin(i2a(i))))
        \replacewith (i)
        \heuristics (simplify)
    };
    sumSin2 {
        \schemaVar \term Atom a;
        \find (sum(sin(a)))
        \replacewith (\if (in(a,Int))
                      \then (a2i(a))
                      \else (0))
        \heuristics (simplify)
    };
}

