Windows PowerShell
Copyright (C) 2009 Microsoft Corporation. Alle Rechte vorbehalten.

Willkommen in der Z3 Powershell. Tippen Sie 'z3' zum starten.
Mit dem Befehl ($) Host.UI.RawUI.WindowTitle = 'neuer Titel' lässt sich der Titel des Fensters ändern

PS D:\Entwicklung\workspace\alloy2relsmt\smtexamples> $Host.UI.RawUI.WindowTitle = 'proof'
PS D:\Entwicklung\workspace\alloy2relsmt\smtexamples> z3 /st .\transcloslemmaproof1.smt2
WARNING: pulled nested quantifier to be able to find an useable pattern (quantifier id: k_38)
sat
(model
  ;; universe for Atom:
  ;;   Atom_val_0 Atom_val_1
  ;; -----------
  ;; definitions for universe elements:
  (declare-fun Atom_val_0 () Atom)
  (declare-fun Atom_val_1 () Atom)
  ;; cardinality constraint:
  (forall ((x Atom)) (or (= x Atom_val_0) (= x Atom_val_1)))
  ;; -----------
  ;; universe for Rel2:
  ;;   Rel2_val_0 Rel2_val_1
  ;; -----------
  ;; definitions for universe elements:
  (declare-fun Rel2_val_0 () Rel2)
  (declare-fun Rel2_val_1 () Rel2)
  ;; cardinality constraint:
  (forall ((x Rel2)) (or (= x Rel2_val_0) (= x Rel2_val_1)))
  ;; -----------
  (define-fun r_2 () Rel2
    Rel2_val_0)
  (define-fun a2_3 () Atom
    Atom_val_1)
  (define-fun a1_4 () Atom
    Atom_val_0)
  (define-fun k_31 ((x_1 Atom)) Atom
    (ite (= x_1 Atom_val_0) Atom_val_0
      Atom_val_1))
  (define-fun trans ((x_1 Rel2)) Bool
    true)
  (define-fun k_32 ((x_1 Rel2)) Rel2
    (ite (= x_1 Rel2_val_1) Rel2_val_1
      Rel2_val_0))
  (define-fun in_2_33 ((x_1 Atom) (x_2 Atom) (x_3 Rel2)) Bool
    (ite (and (= x_1 Atom_val_0) (= x_2 Atom_val_1) (= x_3 Rel2_val_1)) true
    (ite (and (= x_1 Atom_val_0) (= x_2 Atom_val_1) (= x_3 Rel2_val_0)) true
      false)))
  (define-fun in_2 ((x_1 Atom) (x_2 Atom) (x_3 Rel2)) Bool
    (in_2_33 (k_31 x_1) (k_31 x_2) (k_32 x_3)))
  (define-fun subset_2 ((x_1 Rel2) (x_2 Rel2)) Bool
    (forall ((a0 Atom) (a1 Atom)) (or (not (in_2 a0 a1 x_1)) (in_2 a0 a1 x_2))))
  (define-fun a1_0 ((x_1 Rel2) (x_2 Rel2)) Atom
    Atom_val_0)
  (define-fun transClos ((x_1 Rel2)) Rel2
    Rel2_val_1)
  (define-fun a0_1 ((x_1 Rel2) (x_2 Rel2)) Atom
    Atom_val_0)
)
(:binary-propagations  2
 :decisions            5
 :del-clause           1
 :final-checks         3
 :max-generation       2
 :memory               2.09
 :mk-clause            2
 :propagations         2
 :quant-instantiations 8
 :restarts             2
 :time                 0.01
 :total-time           0.06)
PS D:\Entwicklung\workspace\alloy2relsmt\smtexamples> z3 /st .\transcloslemmaproof1.smt2
WARNING: pulled nested quantifier to be able to find an useable pattern (quantifier id: k_45)
sat
(model
  ;; universe for Atom:
  ;;   Atom_val_0 Atom_val_1
  ;; -----------
  ;; definitions for universe elements:
  (declare-fun Atom_val_0 () Atom)
  (declare-fun Atom_val_1 () Atom)
  ;; cardinality constraint:
  (forall ((x Atom)) (or (= x Atom_val_0) (= x Atom_val_1)))
  ;; -----------
  ;; universe for Rel2:
  ;;   Rel2_val_0 Rel2_val_1
  ;; -----------
  ;; definitions for universe elements:
  (declare-fun Rel2_val_0 () Rel2)
  (declare-fun Rel2_val_1 () Rel2)
  ;; cardinality constraint:
  (forall ((x Rel2)) (or (= x Rel2_val_0) (= x Rel2_val_1)))
  ;; -----------
  (define-fun r_2 () Rel2
    Rel2_val_0)
  (define-fun a2_3 () Atom
    Atom_val_1)
  (define-fun a1_4 () Atom
    Atom_val_0)
  (define-fun in_2_39 ((x_1 Atom) (x_2 Atom) (x_3 Rel2)) Bool
    (ite (and (= x_1 Atom_val_0) (= x_2 Atom_val_1) (= x_3 Rel2_val_1)) true
    (ite (and (= x_1 Atom_val_0) (= x_2 Atom_val_1) (= x_3 Rel2_val_0)) true
      false)))
  (define-fun k_37 ((x_1 Atom)) Atom
    (ite (= x_1 Atom_val_0) Atom_val_0
      Atom_val_1))
  (define-fun k_38 ((x_1 Rel2)) Rel2
    (ite (= x_1 Rel2_val_1) Rel2_val_1
      Rel2_val_0))
  (define-fun in_2 ((x_1 Atom) (x_2 Atom) (x_3 Rel2)) Bool
    (in_2_39 (k_37 x_1) (k_37 x_2) (k_38 x_3)))
  (define-fun subset_2 ((x_1 Rel2) (x_2 Rel2)) Bool
    (forall ((a0 Atom) (a1 Atom)) (or (not (in_2 a0 a1 x_1)) (in_2 a0 a1 x_2))))
  (define-fun trans ((x_1 Rel2)) Bool
    (forall ((a1 Atom) (a2 Atom) (a3 Atom))
      (or (not (and (in_2 a1 a2 x_1) (in_2 a2 a3 x_1))) (in_2 a1 a3 x_1))))
  (define-fun a1_0 ((x_1 Rel2) (x_2 Rel2)) Atom
    Atom_val_0)
  (define-fun transClos ((x_1 Rel2)) Rel2
    Rel2_val_1)
  (define-fun a0_1 ((x_1 Rel2) (x_2 Rel2)) Atom
    Atom_val_0)
)
(:binary-propagations  2
 :conflicts            1
 :decisions            4
 :final-checks         3
 :max-generation       2
 :memory               2.10
 :mk-clause            1
 :propagations         2
 :quant-instantiations 6
 :restarts             2
 :time                 0.01
 :total-time           0.13)
PS D:\Entwicklung\workspace\alloy2relsmt\smtexamples> z3 /st .\transcloslemmaproof2.smt2
WARNING: pulled nested quantifier to be able to find an useable pattern (quantifier id: k_45)
sat
(model
  ;; universe for Atom:
  ;;   Atom_val_0 Atom_val_1
  ;; -----------
  ;; definitions for universe elements:
  (declare-fun Atom_val_0 () Atom)
  (declare-fun Atom_val_1 () Atom)
  ;; cardinality constraint:
  (forall ((x Atom)) (or (= x Atom_val_0) (= x Atom_val_1)))
  ;; -----------
  ;; universe for Rel2:
  ;;   Rel2_val_0 Rel2_val_1
  ;; -----------
  ;; definitions for universe elements:
  (declare-fun Rel2_val_0 () Rel2)
  (declare-fun Rel2_val_1 () Rel2)
  ;; cardinality constraint:
  (forall ((x Rel2)) (or (= x Rel2_val_0) (= x Rel2_val_1)))
  ;; -----------
  (define-fun r_2 () Rel2
    Rel2_val_0)
  (define-fun a2_3 () Atom
    Atom_val_1)
  (define-fun a1_4 () Atom
    Atom_val_0)
  (define-fun in_2_39 ((x_1 Atom) (x_2 Atom) (x_3 Rel2)) Bool
    (ite (and (= x_1 Atom_val_0) (= x_2 Atom_val_1) (= x_3 Rel2_val_1)) true
    (ite (and (= x_1 Atom_val_0) (= x_2 Atom_val_1) (= x_3 Rel2_val_0)) true
      false)))
  (define-fun k_37 ((x_1 Atom)) Atom
    (ite (= x_1 Atom_val_0) Atom_val_0
      Atom_val_1))
  (define-fun k_38 ((x_1 Rel2)) Rel2
    (ite (= x_1 Rel2_val_1) Rel2_val_1
      Rel2_val_0))
  (define-fun in_2 ((x_1 Atom) (x_2 Atom) (x_3 Rel2)) Bool
    (in_2_39 (k_37 x_1) (k_37 x_2) (k_38 x_3)))
  (define-fun subset_2 ((x_1 Rel2) (x_2 Rel2)) Bool
    (forall ((a0 Atom) (a1 Atom)) (or (not (in_2 a0 a1 x_1)) (in_2 a0 a1 x_2))))
  (define-fun trans ((x_1 Rel2)) Bool
    (forall ((a1 Atom) (a2 Atom) (a3 Atom))
      (or (not (and (in_2 a1 a2 x_1) (in_2 a2 a3 x_1))) (in_2 a1 a3 x_1))))
  (define-fun a1_0 ((x_1 Rel2) (x_2 Rel2)) Atom
    Atom_val_0)
  (define-fun transClos ((x_1 Rel2)) Rel2
    Rel2_val_1)
  (define-fun a0_1 ((x_1 Rel2) (x_2 Rel2)) Atom
    Atom_val_0)
)
(:added-eqs            7
 :binary-propagations  7
 :conflicts            1
 :decisions            6
 :final-checks         3
 :max-generation       2
 :memory               2.10
 :mk-clause            1
 :propagations         7
 :quant-instantiations 13
 :restarts             2
 :time                 0.01
 :total-time           0.15)
PS D:\Entwicklung\workspace\alloy2relsmt\smtexamples>