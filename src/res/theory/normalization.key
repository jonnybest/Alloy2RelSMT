\schemaVariables {
    \term Relation R,S,T;
    \term Rel1 R1,S1,T1,U1;
    \term Rel2 R2,S2,T2,U2;
    \term Rel3 R3,S3,T3;
    \term Tuple t;
    \term Atom a,b,c,d,e,f;
    \term Tuple2 a2,b2;
    \term Tuple3 a3,b3;
    \term int n;
    \variables Atom va,vb,vc,vd,ve,vf;
    \variables int vn;
    \variables Tuple vt,vu;
    \variables Tuple2 va2;
    \variables Tuple3 va3;
    \formula phi,psi;
    \skolemTerm Rel1 skR1;
    \skolemTerm Rel2 skR2;
}

\rules {

    // terms of the form "exists Atom a; (a = b & F)" appear
    // frequently in proofs when the join operator is applied to a
    // singleton. Obviously, there is only one correct
    // instantiation. These rules eliminate some intermediate
    // steps.
    elim_existsSin { /* proved */
        \find (\exists va; (in(va,sin(a)) & phi))
        \varcond (\notFreeIn(va,a))
        \replacewith ({\subst va; a}phi) 
        \heuristics (concrete)
        // immediate
        \displayname "elim_exists"
    };
    elim_existsSin_ { /* proved */
        \find (\exists va; (phi & in(va,sin(a))))
        \varcond (\notFreeIn(va,a))
        \replacewith ({\subst va; a}phi)
        \heuristics (concrete)
        // immediate
        \displayname "elim_exists"
    };

    quantifierNormalization {
        \find (\forall va; (in(va,R1) -> phi & psi) ==>)
        \varcond(\notFreeIn(va,R1))
        \replacewith (\forall va; (in(va,R1) -> phi) & \forall va; (in(va,R1)
        ->psi) ==>)
        \heuristics (normalization)
    };

////////////////////////////////////////////////
////////////////////////////////////////////////
//  sin = none
////////////////////////////////////////////////
////////////////////////////////////////////////
    sinNone1 { /* proved */
        \find (sin(a) = none ==>)
        \replacewith (false ==>)
        \heuristics (concrete)
        // immediate
        \displayname "sin_none_left"
    };
    sinNone2 { /* proved */
        \find (sin2(a2) = none2 ==>)
        \replacewith (false ==>)
        \heuristics (concrete)
        // immediate
        \displayname "sin_none_left"
    };
    sinNone3 { /* proved */
        \find (sin3(a3) = none3 ==>)
        \replacewith (false ==>)
        \heuristics (concrete)
        // immediate
        \displayname "sin_none_left"
    };

////////////////////////////////////////////////
////////////////////////////////////////////////
//  disj + univ
////////////////////////////////////////////////
////////////////////////////////////////////////
    disjUniv { /* proved */
        \find (disj(univ,R1))
        \replacewith (R1 = none)
        \heuristics (simplify)
    };
    disjUniv_ { /* proved */
        \find (disj(R1,univ))
        \replacewith (R1 = none)
        \heuristics (simplify)
    };

////////////////////////////////////////////////
////////////////////////////////////////////////
//  subrel + univ
////////////////////////////////////////////////
////////////////////////////////////////////////
    subrelUniv2 { /* proved */
        \find (subrel(R1,univ))
        \replacewith (true)
        \heuristics (simplify)
        \displayname "subrel_univ"
    };

//////////////////////////////////////////////////
//////////////////////////////////////////////////
// subrel + transp
//////////////////////////////////////////////////
//////////////////////////////////////////////////
    subrelTransp { /* proved */
        \find (subrel(transp(R2),transp(S2)) ==>)
        \replacewith (subrel(R2,S2) ==>)
        \heuristics (simplify)
        \displayname "subrel_simplify"
    };

//////////////////////////////////////////////////
//////////////////////////////////////////////////
// equality + transp
//////////////////////////////////////////////////
//////////////////////////////////////////////////
    transpEquality1 { /* proved */
        \find (transp(R2) = transp(S2))
        \replacewith (R2 = S2)
        \heuristics (simplify)
        \displayname "simplify"
    };

//////////////////////////////////////////////////
//////////////////////////////////////////////////
// disj + transp
//////////////////////////////////////////////////
//////////////////////////////////////////////////
    disjTransp { /* proved */
        \find (disj(transp(R2),transp(S2)) ==>)
        \replacewith (disj(R2,S2) ==>)
        \heuristics (simplify)
        \displayname "simplify"
    };

//////////////////////////////////////////////////
//////////////////////////////////////////////////
// equality
//////////////////////////////////////////////////
//////////////////////////////////////////////////
    relEqLeft1 { /* proved */
        \schemaVar \term Rel1 left, right;
        \find (left = right ==>)
        \replacewith (subrel(left,right) ==>)
        \add (subrel(right,left) ==>)
        \addrules ( applyEquality {
                      \find (left)
                      \replacewith (right)
                      \heuristics (apply_rewritten_eq)
                    } )
        \heuristics (normalization)
    };

    relEqLeft2 { /* proved */
        \schemaVar \term Rel2 left, right;
        \find (left = right ==>)
        \replacewith (subrel(left,right) ==>)
        \add (subrel(right,left) ==>)
        \addrules ( applyEquality {
                      \find (left)
                      \replacewith (right)
                      \heuristics (apply_rewritten_eq)
                    } )
        \heuristics (normalization)
    };

    relEqLeft3 { /* proved */
        \schemaVar \term Rel3 left, right;
        \find (left = right ==>)
        \replacewith (subrel(left,right) ==>)
        \add (subrel(right,left) ==>)
        \addrules ( applyEquality {
                      \find (left)
                      \replacewith (right)
                      \heuristics (apply_rewritten_eq)
                    } )
        \heuristics (normalization)
    };

//////////////////////////////////////////////////
//////////////////////////////////////////////////
// comprehensions
//////////////////////////////////////////////////
//////////////////////////////////////////////////
    relationEqCompr1 { /* proved */
        \find (compr1{vd;}(phi) = R1 ==>)
        \varcond (\notFreeIn(va,R1,phi))
        \replacewith (\forall va; (in(va,compr1{vd;}(phi)) <-> in(va,R1)) ==>)
        \heuristics (normalization)
        \displayname "rewrite_equality"
    };
    relationEqCompr2 { /* proved */
        \find (compr2{vd;}(phi) = R2 ==>)
        \varcond (\notFreeIn(va,R2,phi), \notFreeIn(vb,R2,phi))
        \replacewith (\forall va;
                        \forall vb; (    in(binary(va,vb),R2)
                                     <-> in(binary(va,vb),compr2{vd;}(phi))) ==>)
        \heuristics (normalization)
        \displayname "rewrite_equality"
    };
    relationEqCompr3 { /* proved */
        \find (compr3{vd;}(phi) = R3 ==>)
        \varcond (\notFreeIn(va,R3,phi), \notFreeIn(vb,R3,phi),
                  \notFreeIn(vc,R3,phi))
        \replacewith (\forall va;
                        \forall vb;
                          \forall vc; (in(ternary(va,vb,vc),R3)
                                       <-> in(ternary(va,vb,vc),compr3{vd;}(phi))) ==>)
        \heuristics (normalization)
        \displayname "rewrite_equality"
    };
    pullOutCompr1 {
        \schemaVar \skolemTerm Rel1 r;
        \find (compr1{vd;}(phi))
        \varcond (\new (r, \dependingOn(phi)))
        \replacewith (r)
        \add (compr1{vd;}(phi) = r ==>)
        \heuristics (normalization)
    };
    pullOutCompr2 {
        \schemaVar \skolemTerm Rel2 r;
        \find (compr2{vd;}(phi))
        \varcond (\new (r, \dependingOn(phi)))
        \replacewith (r)
        \add (compr2{vd;}(phi) = r ==>)
        \heuristics (normalization)
    };
    pullOutCompr3 {
        \schemaVar \skolemTerm Rel3 r;
        \find (compr3{vd;}(phi))
        \varcond (\new (r, \dependingOn(phi)))
        \replacewith (r)
        \add (compr3{vd;}(phi) = r ==>)
        \heuristics (normalization)
    };

    subrelUniv { /* proved */
        \find (subrel(univ,R1) ==>)
        \add (R1 = univ ==>)
        \heuristics (normalization, noDuplicateApp)
        \displayname "subrel_univ"
    };

    loneNone1 { /* proved */
        \find (lone(none))
        \replacewith (true)
        \heuristics (simplify)
    };

    loneNone2 { /* proved */
        \find (lone(none2))
        \replacewith (true)
        \heuristics (simplify)
    };

    loneNone3 { /* proved */
        \find (lone(none3))
        \replacewith (true)
        \heuristics (simplify)
    };

    oneNone1 { /* proved */
        \find (one(none))
        \replacewith (false)
        \heuristics (simplify)
    };

    oneNone2 { /* proved */
        \find (one(none2))
        \replacewith (false)
        \heuristics (simplify)
    };

    oneNone3 { /* proved */
        \find (one(none3))
        \replacewith (false)
        \heuristics (simplify)
    };

}