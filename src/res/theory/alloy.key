/**
   Basic Theory for translation of Alloy models
   So far, only up to an arity of 3

   All operators are typed explicitly, i.e. there is one function for
   any arity. The reason for this is, that whenever type information
   is hidden by some operator, rules may not be applicable. For
   example "in(x,join(join(A,B),C))" is a term where no rule is
   applicable, because the inner join application hides the type
   information that is needed to rewrite the outer join. Also
   operators (namely the set operations) whose axioms themselves might
   be kept generic (i.e. match on Relation and Tuple rather than
   Rel1... and Atom/Tuple2... respectively) have to be typed
   explicitly, because otherwise equality and other predicates may not
   be resolved.

   Arity mismatches are left underspecified, which is reasonable since
   we do not need to consider ill-typed models.

   This theory for Alloy translations introduces constructor functions
   for tuples of every arity. Some axioms (e.g. the prod axioms) only
   match on constructor terms.  This approach allows us to omit a
   projector function (i.e. a function yielding some specific
   compontent of a tuple).
 **/

\sorts {
    // Types for Relations of several arities
    Relation;
    Rel1 \extends Relation;
    Rel2 \extends Relation;
    Rel3 \extends Relation;
    // Types for Tuples of several arities
    Tuple;
    Atom \extends Tuple;
    Tuple2 \extends Tuple;
    Tuple3 \extends Tuple;

    Formula;
}

\predicates {
    // Membership predicate
    in(Tuple,Relation);

    // The subrel predicate for relations
    subrel(Relation,Relation);

    // Stating two relations to be disjoint
    disj(Relation,Relation);

    // Shorthand predicate lone holds iff the
    // given relation contains at most one tuple
    lone(Relation);

    // Shorthand predicate one holds iff the
    // given relation contains exactly one tuple
    one(Relation);

    // Shorthand predicate some holds iff the
    // given relation is not empty
    some(Relation);

    // bind a variable (used with comprehension)
    bind{true}(Formula);
}

\functions {
    // contructing a tuple of a certain arity
    Tuple2 binary(Atom,Atom);
    Tuple3 ternary(Atom,Atom,Atom);

    // Alloy's dot join operator for several arities
    Rel1 join1x2(Rel1,Rel2);
    Rel1 join2x1(Rel2,Rel1);
    Rel2 join2x2(Rel2,Rel2);
    Rel2 join1x3(Rel1,Rel3);
    Rel2 join3x1(Rel3,Rel1);
    Rel3 join3x2(Rel3,Rel2);
    Rel3 join2x3(Rel2,Rel3);

    // sin constructs a singleton relation from an Atom,
    // i.e. a relation containing only this atom in a unary tuple
    Rel1 sin(Atom);
    Rel2 sin2(Tuple2);
    Rel3 sin3(Tuple3);

    // The arrow product of two relations for several arities.
    Rel2 prod1x1(Rel1,Rel1);
    Rel3 prod1x2(Rel1,Rel2);
    Rel3 prod2x1(Rel2,Rel1);

    // the common union of two relations for several arities
    Rel1 union1(Rel1,Rel1);
    Rel2 union2(Rel2,Rel2);
    Rel3 union3(Rel3,Rel3);

    // the common difference operator on relations
    Rel1 diff1(Rel1,Rel1);
    Rel2 diff2(Rel2,Rel2);
    Rel3 diff3(Rel3,Rel3);

    // the common intersection operator on relations
    Rel1 inter1(Rel1,Rel1);
    Rel2 inter2(Rel2,Rel2);
    Rel3 inter3(Rel3,Rel3);

    // the override operator
    Rel1 overr1(Rel1,Rel1);
    Rel2 overr2(Rel2,Rel2);
    Rel3 overr3(Rel3,Rel3);

    // the transpose operation on binary relations
    Rel2 transp(Rel2);

    // domain restriction s <: r --> domRestr(s,r)
    Rel1 domRestr1(Rel1,Rel1);
    Rel2 domRestr2(Rel1,Rel2);
    Rel3 domRestr3(Rel1,Rel3);

    // range restriction r :> s --> rangeRestr(r,s)
    Rel1 rangeRestr1(Rel1,Rel1);
    Rel2 rangeRestr2(Rel2,Rel1);
    Rel3 rangeRestr3(Rel3,Rel1);

    // the empty set / relation
    // Alloy's none is a set, not a relation. However, none for other
    // arities turns out to be useful, when used in equalities,
    // e.g. to maintain Alloy's "no" expression
    Rel1 none;
    Rel2 none2;
    Rel3 none3;

    // the universal set
    Rel1 univ;

    // the identity relation
    Rel2 iden;

    // the transitive closure of a binary relation
    Rel2 transClos(Rel2);
    // the n-th join iteration which converges towards the transitive
    // closure
    Rel2 iterJoin(Rel2,int);

    // the reflexive transitive closure of a binary relation
    Rel2 reflTransClos(Rel2);

    // comprehensions
    Rel1 compr1{true} (Formula);
    Rel2 compr2{true} (Formula);
    Rel3 compr3{true} (Formula);
}

