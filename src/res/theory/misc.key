\schemaVariables {
    \term Relation R,S,T;
    \term Rel1 R1,S1,T1,U1;
    \term Rel2 R2,S2,T2,U2;
    \term Rel3 R3,S3,T3;
    \term Tuple t;
    \term Atom a,b,c,d,e,f;
    \term Tuple2 a2,b2;
    \term Tuple3 a3,b3;
    \term int n;
    \variables Atom va,vb,vc,vd,ve,vf;
    \variables int vn;
    \variables Tuple vt,vu;
    \variables Tuple2 va2;
    \variables Tuple3 va3;
    \formula phi,psi;
}

\rules {

    quantifierToTaclet1 {
        \find (\forall va; (in(va,R1) -> phi) ==>)
        \varcond (\notFreeIn(va,R1))
        \replacewith (==>)
        \addrules (
            applyForallFormula {
                \find (in(a,R1) ==>)
                \add ({\subst va; a}phi ==>)
                \heuristics (implications2, performInstantiation)
            },
            restoreForallFormula {
                \varcond (\notFreeIn(vb,R1,phi))
                \add (\forall vb; (in(vb,R1) ->
                        {\subst va; vb}phi) ==>)
            })
        \heuristics (quantifierToTaclet)
        \displayname "add_rule_for_quantifier"
    };

    quantifierToTaclet2 {
        \find (\forall va; (!in(va,R1) | phi) ==>)
        \varcond (\notFreeIn(va,R1))
        \replacewith (==>)
        \addrules (
            applyForallFormula {
                \find (in(a,R1) ==>)
                \add ({\subst va; a}phi ==>)
                \heuristics (implications2, performInstantiation)
            },
            restoreForallFormula {
                \varcond (\notFreeIn(vb,R1,phi))
                \add (\forall vb; (!in(vb,R1) |
                        {\subst va; vb}phi) ==>)
            })
        \heuristics (quantifierToTaclet)
        \displayname "add_rule_for_quantifier"
    };

    quantifierToTaclet3 {
        \find (\forall va; (!in(binary(va,b),R2) | phi) ==>)
        \varcond (\notFreeIn(va,R2,b))
        \replacewith (==>)
        \addrules (
            applyForallFormula {
                \find (in(binary(a,b),R2) ==>)
                \add ({\subst va; a}phi ==>)
                \heuristics (implications2, performInstantiation)
            },
            restoreForallFormula {
                \varcond (\notFreeIn(vb,R2,phi,b))
                \add (\forall vb; (!in(binary(vb,b),R2) |
                        {\subst va; vb}phi) ==>)
            })
        \heuristics (quantifierToTaclet)
        \displayname "add_rule_for_quantifier"
    };

    quantifierToTaclet4 {
        \find (\forall va; (!in(binary(b,va),R2) | phi) ==>)
        \varcond (\notFreeIn(va,R2,b))
        \replacewith (==>)
        \addrules (
            applyForallFormula {
                \find (in(binary(b,a),R2) ==>)
                \add ({\subst va; a}phi ==>)
                \heuristics (implications2, performInstantiation)
            },
            restoreForallFormula {
                \varcond (\notFreeIn(vb,R2,phi,b))
                \add (\forall vb; (!in(binary(b,vb),R2) |
                        {\subst va; vb}phi) ==>)
            })
        \heuristics (quantifierToTaclet)
        \displayname "add_rule_for_quantifier"
    };

    quantifierToTaclet5 {
        \find (\forall va; (!in(ternary(va,b,c),R3) | phi) ==>)
        \varcond (\notFreeIn(va,R3,b,c))
        \replacewith (==>)
        \addrules (
            applyForallFormula {
                \find (in(ternary(a,b,c),R3) ==>)
                \add ({\subst va; a}phi ==>)
                \heuristics (implications2, performInstantiation)
            },
            restoreForallFormula {
                \varcond (\notFreeIn(vb,R3,phi,b,c))
                \add (\forall vb; (!in(ternary(vb,b,c),R3) |
                        {\subst va; vb}phi) ==>)
            })
        \heuristics (quantifierToTaclet)
        \displayname "add_rule_for_quantifier"
    };

    quantifierToTaclet6 {
        \find (\forall va; (!in(ternary(b,va,c),R3) | phi) ==>)
        \varcond (\notFreeIn(va,R3,b,c))
        \replacewith (==>)
        \addrules (
            applyForallFormula {
                \find (in(ternary(b,a,c),R3) ==>)
                \add ({\subst va; a}phi ==>)
                \heuristics (implications2, performInstantiation)
            },
            restoreForallFormula {
                \varcond (\notFreeIn(vb,R3,phi,b,c))
                \add (\forall vb; (!in(ternary(b,vb,c),R3) |
                        {\subst va; vb}phi) ==>)
            })
        \heuristics (quantifierToTaclet)
        \displayname "add_rule_for_quantifier"
    };

    quantifierToTaclet7 {
        \find (\forall va; (!in(ternary(c,b,va),R3) | phi) ==>)
        \varcond (\notFreeIn(va,R3,b,c))
        \replacewith (==>)
        \addrules (
            applyForallFormula {
                \find (in(ternary(c,b,a),R3) ==>)
                \add ({\subst va; a}phi ==>)
                \heuristics (implications2, performInstantiation)
            },
            restoreForallFormula {
                \varcond (\notFreeIn(vb,R3,phi,b,c))
                \add (\forall vb; (!in(ternary(c,b,vb),R3) |
                        {\subst va; vb}phi) ==>)
            })
        \heuristics (quantifierToTaclet)
        \displayname "add_rule_for_quantifier"
    };

    quantifierToTaclet8 {
        \find (\forall va; (in(binary(va,b),R2) -> phi) ==>)
        \varcond (\notFreeIn(va,R2,b))
        \replacewith (==>)
        \addrules (
            applyForallFormula {
                \find (in(binary(a,b),R2) ==>)
                \add ({\subst va; a}phi ==>)
                \heuristics (implications2, performInstantiation)
            },
            restoreForallFormula {
                \varcond (\notFreeIn(vb,R2,phi,b))
                \add (\forall vb; (in(binary(vb,b),R2) ->
                        {\subst va; vb}phi) ==>)
            })
        \heuristics (quantifierToTaclet)
        \displayname "add_rule_for_quantifier"
    };

    quantifierToTaclet9 {
        \find (\forall va; (in(binary(b,va),R2) -> phi) ==>)
        \varcond (\notFreeIn(va,R2,b))
        \replacewith (==>)
        \addrules (
            applyForallFormula {
                \find (in(binary(b,a),R2) ==>)
                \add ({\subst va; a}phi ==>)
                \heuristics (implications2, performInstantiation)
            },
            restoreForallFormula {
                \varcond (\notFreeIn(vb,R2,phi,b))
                \add (\forall vb; (in(binary(b,vb),R2) ->
                        {\subst va; vb}phi) ==>)
            })
        \heuristics (quantifierToTaclet)
        \displayname "add_rule_for_quantifier"
    };

    quantifierToTaclet10 {
        \find (\forall va; (in(ternary(va,b,c),R3) -> phi) ==>)
        \varcond (\notFreeIn(va,R3,b,c))
        \replacewith (==>)
        \addrules (
            applyForallFormula {
                \find (in(ternary(a,b,c),R3) ==>)
                \add ({\subst va; a}phi ==>)
                \heuristics (implications2, performInstantiation)
            },
            restoreForallFormula {
                \varcond (\notFreeIn(vb,R3,phi,b,c))
                \add (\forall vb; (in(ternary(vb,b,c),R3) ->
                        {\subst va; vb}phi) ==>)
            })
        \heuristics (quantifierToTaclet)
        \displayname "add_rule_for_quantifier"
    };

    quantifierToTaclet11 {
        \find (\forall va; (in(ternary(b,va,c),R3) -> phi) ==>)
        \varcond (\notFreeIn(va,R3,b,c))
        \replacewith (==>)
        \addrules (
            applyForallFormula {
                \find (in(ternary(b,a,c),R3) ==>)
                \add ({\subst va; a}phi ==>)
                \heuristics (implications2, performInstantiation)
            },
            restoreForallFormula {
                \varcond (\notFreeIn(vb,R3,phi,b,c))
                \add (\forall vb; (in(ternary(b,vb,c),R3) ->
                        {\subst va; vb}phi) ==>)
            })
        \heuristics (quantifierToTaclet)
        \displayname "add_rule_for_quantifier"
    };

    quantifierToTaclet12 {
        \find (\forall va; (in(ternary(c,b,va),R3) -> phi) ==>)
        \varcond (\notFreeIn(va,R3,b,c))
        \replacewith (==>)
        \addrules (
            applyForallFormula {
                \find (in(ternary(c,b,a),R3) ==>)
                \add ({\subst va; a}phi ==>)
                \heuristics (implications2, performInstantiation)
            },
            restoreForallFormula {
                \varcond (\notFreeIn(vb,R3,phi,b,c))
                \add (\forall vb; (in(ternary(c,b,vb),R3) ->
                        {\subst va; vb}phi) ==>)
            })
        \heuristics (quantifierToTaclet)
        \displayname "add_rule_for_quantifier"
    };

    quantifierToTaclet13 {
        \find (\forall va; (!in(va,R1) | phi | psi) ==>)
        \varcond (\notFreeIn(va,R1))
        \replacewith (==>)
        \addrules (
            applyForallFormula {
                \find (in(a,R1) ==>)
                \add ({\subst va; a}phi | {\subst va; a}psi ==>)
                \heuristics (implications2, performInstantiation)
            },
            restoreForallFormula {
                \varcond (\notFreeIn(vb,R1,phi,psi))
                \add (\forall vb; (!in(vb,R1) |
                        {\subst va; vb}phi | {\subst va; vb}psi) ==>)
            })
        \heuristics (quantifierToTaclet)
        \displayname "add_rule_for_quantifier"
    };

    quantifierToTaclet14 {
        \find (\forall va; (phi | !in(va,R1)) ==>)
        \varcond (\notFreeIn(va,R1))
        \replacewith (==>)
        \addrules (
            applyForallFormula {
                \find (in(a,R1) ==>)
                \add ({\subst va; a}phi ==>)
                \heuristics (implications2, performInstantiation)
            },
            restoreForallFormula {
                \varcond (\notFreeIn(vb,R1,phi))
                \add (\forall vb; ({\subst va; vb}phi | !in(vb,R1)) ==>)
            })
        \heuristics (quantifierToTaclet)
        \displayname "add_rule_for_quantifier"
    };

}

