/*
 * This file introduces functions and predicates to alloy finitization of
 * relations.
 * The finite predicate indicates that a relation is finite
 * When the finite predicate holds for some relation R, the function elem is
 * defined to be a bijection from an integer interval to R, i.e. to enumerate
 * the elements of R.
 * Finally, the cardinality operator is defined here.
 * This file contains an (incomplete) inference system for card and finite.
 */

\functions {
    Atom elem1(Rel1,int);
    Tuple2 elem2(Rel2,int);
    Tuple3 elem3(Rel3,int);

    // the inverse for the elem functions
    int ord(Relation,Tuple);

    // the cardinality operator
    int card(Relation);
}

\predicates {
    finite(Relation);
}

\schemaVariables {
    \term Rel1 R1,S1;
    \term Rel2 R2,S2;
    \term Rel3 R3,S3;
    \term Relation R,S;
    \term Atom a,b;
    \term Tuple2 a2,b2;
    \term Tuple3 a3,b3;
    \term Tuple t,s;
    \term int i,j;

    \variables int n;
    \variables Atom va,vb,vc;
}

\rules {

    //---
    //defining the enumerator
    //---
    elemInjective1 {
        \assumes (finite(R1), i >= 0, j >= 0,
                  i < card(R1), j < card(R1) ==>)
        \find (elem1(R1,i) = elem1(R1,j))
        \replacewith (i = j)
        \heuristics (simplify)
    };

    elemInjective2 {
        \assumes (finite(R2), i >= 0, j >= 0,
                  i < card(R2), j < card(R2) ==>)
        \find (elem2(R2,i) = elem2(R2,j))
        \replacewith (i = j)
        \heuristics (simplify)
    };

    elemInjective3 {
        \assumes (finite(R3), i >= 0, j >= 0,
                  i < card(R3), j < card(R3) ==>)
        \find (elem3(R3,i) = elem3(R3,j))
        \replacewith (i = j)
        \heuristics (simplify)
    };

    elemSurjective1 {
        \assumes (finite(R1) ==>)
        \find (in(a,R1) ==>)
        \varcond (\notFreeIn(n,a,R1))
        \add (\exists n; (n >= 0 & n < card(R1) & a = elem1(R1,n)) ==>)
    };

    elemSurjective2 {
        \assumes (finite(R2) ==>)
        \find (in(a2,R2) ==>)
        \varcond (\notFreeIn(n,a2,R2))
        \add (\exists n; (n >= 0 & n < card(R2) & a2 = elem2(R2,n)) ==>)
    };

    elemSurjective3 {
        \assumes (finite(R3) ==>)
        \find (in(a3,R3) ==>)
        \varcond (\notFreeIn(n,a3,R3))
        \add (\exists n; (n >= 0 & n < card(R3) & a3 = elem3(R3,n)) ==>)
    };

    ordInverses1 {
        \assumes (i >= 0, i < card(R1), finite(R1) ==>)
        \find (ord(R1,elem1(R1,i)))
        \replacewith (i)
        \heuristics (simplify)
    };

    ordInverses2 {
        \assumes (i >= 0, i < card(R2), finite(R2) ==>)
        \find (ord(R2,elem2(R2,i)))
        \replacewith (i)
        \heuristics (simplify)
    };

    ordInverses3 {
        \assumes (i >= 0, i < card(R3), finite(R3) ==>)
        \find (ord(R3,elem3(R3,i)))
        \replacewith (i)
        \heuristics (simplify)
    };


    //---
    //lemmata
    //---

    elem1 {
        \assumes (finite(R1) ==>)
        \find (elem1(R1,i))
        \varcond(\notFreeIn(va,i,R1))
        \add (\if (i >= 0 & i < card(R1))
              \then (\exists va; (  elem1(R1,i) = va
                                  & ord(R1,va) = i
                                  & in(va,R1)))
              \else (true) ==>)
        \heuristics (normalization, noDuplicateApp)
    };

    elem1Redund {
        \assumes (elem1(R1,i) = a, ord(R1,a) = i, in(a,R1), finite(R1) ==>)
        \find (\exists va; (elem1(R1,i) = va & ord(R1,va) = j & in(va,R1)))
        \varcond(\notFreeIn(va,R1,i))
        \replacewith (true)
        \heuristics (concrete)
    };

    elem2 {
        \assumes (finite(R2) ==>)
        \find (elem2(R2,i))
        \varcond(\notFreeIn(va,i,R2),\notFreeIn(vb,i,R2))
        \add (\if (i >= 0 & i < card(R2))
              \then (\exists va; \exists vb; (
                                   elem2(R2,i) = binary(va,vb)
                                  & ord(R2,binary(va,vb)) = i
                                  & in(binary(va,vb),R2)))
              \else (true) ==>)
        \heuristics (normalization, noDuplicateApp)
    };

    elem2Redund {
        \assumes (elem2(R2,i) = a2, ord(R2,a2) = i, in(a2,R2), finite(R2) ==>)
        \find (\exists va; \exists vb; (
                                    elem2(R2,i) = binary(va,vb)
                                  & ord(R2,binary(va,vb)) = i
                                  & in(binary(va,vb),R2)))
        \varcond(\notFreeIn(va,R2,i),\notFreeIn(vb,R2,i))
        \replacewith (true)
        \heuristics (concrete)
    };

    elem3 {
        \assumes (finite(R3) ==>)
        \find (elem3(R3,i))
        \varcond(\notFreeIn(va,i,R3),\notFreeIn(vb,i,R3),\notFreeIn(vc,i,R3))
        \add (\if (i >= 0 & i < card(R3))
              \then (\exists va; \exists vb; \exists vc; (
                                   elem3(R3,i) = ternary(va,vb,vc)
                                  & ord(R3,ternary(va,vb,vc)) = i
                                  & in(ternary(va,vb,vc),R3)))
              \else (true) ==>)
        \heuristics (normalization, noDuplicateApp)
    };

    elem3Redund {
        \assumes (elem3(R3,i) = a3, ord(R3,a3) = i, in(a3,R3), finite(R3) ==>)
        \find (\exists va; \exists vb; \exists vc; (
                                    elem3(R3,i) = ternary(va,vb,vc)
                                  & ord(R3,ternary(va,vb,vc)) = i
                                  & in(ternary(va,vb,vc),R3)))
        \varcond(\notFreeIn(va,R3,i),\notFreeIn(vb,R3,i),\notFreeIn(vc,R3,i))
        \replacewith (true)
        \heuristics (concrete)
    };

    ord1 {
        \assumes (finite(R1) ==>)
        \find (ord(R1,a))
        \varcond(\notFreeIn(n,a,R1))
        \add (\if (in(a,R1))
              \then (\exists n; (  n >= 0
                                 & elem1(R1,n) = a
                                 & ord(R1,a) = n
                                 & in(a,R1)))
              \else (true) ==>)
        \heuristics (normalization, noDuplicateApp)
    };

    ordRedund1 {
        \assumes (elem1(R1,i) = a, ord(R1,a) = i, in(a,R1), finite(R1) ==>)
        \find (\exists n; (  n >= 0
                           & elem1(R1,n) = a
                           & ord(R1,a) = n
                           & in(a,R1)))
        \varcond (\notFreeIn (n,R1,i,a))
        \replacewith (true)
        \heuristics (concrete)
    };

    ord2 {
        \assumes (finite(R2) ==>)
        \find (ord(R2,a2))
        \varcond(\notFreeIn(n,a2,R2))
        \add (\if (in(a2,R2))
              \then (\exists n; (  n >= 0
                                 & elem2(R2,n) = a2
                                 & ord(R2,a2) = n
                                 & in(a2,R2)))
              \else (true) ==>)
        \heuristics (normalization, noDuplicateApp)
    };

    ordRedund2 {
        \assumes (elem2(R2,i) = a2, ord(R2,a2) = i, in(a2,R2), finite(R2) ==>)
        \find (\exists n; (  n >= 0
                           & elem2(R2,n) = a2
                           & ord(R2,a2) = n
                           & in(a2,R2)))
        \varcond (\notFreeIn (n,R2,i,a2))
        \replacewith (true)
        \heuristics (concrete)
    };

    ord3 {
        \assumes (finite(R3) ==>)
        \find (ord(R3,a3))
        \varcond(\notFreeIn(n,a3,R3))
        \add (\if (in(a3,R3))
              \then (\exists n; (  n >= 0
                                 & elem3(R3,n) = a3
                                 & ord(R3,a3) = n
                                 & in(a3,R3)))
              \else (true) ==>)
        \heuristics (normalization, noDuplicateApp)
    };

    ordRedund3 {
        \assumes (elem3(R3,i) = a3, ord(R3,a3) = i, in(a3,R3), finite(R3) ==>)
        \find (\exists n; (  n >= 0
                           & elem3(R3,n) = a3
                           & ord(R3,a3) = n
                           & in(a3,R3)))
        \varcond (\notFreeIn (n,R3,i,a3))
        \replacewith (true)
        \heuristics (concrete)
    };

    elem1Eq {
        \assumes (in(a,R1), in(b,R1), finite(R1) ==>)
        \find (a = b)
        \replacewith (ord(R1,a) = ord(R1,b))
        \heuristics (simplify)
    };

    elem2Eq {
        \assumes (in(a2,R2), in(b2,R2), finite(R2) ==>)
        \find (a2 = b2)
        \replacewith (ord(R2,a2) = ord(R2,b2))
        \heuristics (concrete)
    };

    elem3Eq {
        \assumes (in(a3,R3), in(b3,R3), finite(R3) ==>)
        \find (a3 = b3)
        \replacewith (ord(R3,a3) = ord(R3,b3))
        \heuristics (concrete)
    };

    //---
    //cardinality
    //---
    cardinalityPositive {
        \assumes (finite(R) ==>)
        \find (card(R))
        \add (card(R) >= 0 ==>)
        \heuristics (normalization, noDuplicateApp)
    };

    cardOne {
        \assumes (one(R) ==>)
        \find (card(R))
        \replacewith (1)
        \heuristics (simplify)
    };

    cardLone {
        \assumes (lone(R) ==>)
        \find (card(R))
        \add (card(R) <= 1 ==>)
        \heuristics (implications1)
    };

    cardUnion1 {
        \find (card(union1(R1,S1)))
        \replacewith (\if (finite(R1) & finite(S1))
                      \then (card(R1)+card(S1)-card(inter1(R1,S1)))
                      \else (card(union1(R1,S1))))
        \heuristics (simplify_enlarging, noDuplicateApp)
    };

    cardUnion2 {
        \find (card(union2(R2,S2)))
        \replacewith (\if (finite(R2) & finite(S2))
                      \then (card(R2)+card(S2)-card(inter2(R2,S2)))
                      \else (card(union2(R2,S2))))
        \heuristics (simplify_enlarging, noDuplicateApp)
    };

    cardUnion3 {
        \find (card(union3(R3,S3)))
        \replacewith (\if (finite(R3) & finite(S3))
                      \then (card(R3)+card(S3)-card(inter3(R3,S3)))
                      \else (card(union3(R3,S3))))
        \heuristics (simplify_enlarging, noDuplicateApp)
    };

    cardInter1 {
        \find (card(inter1(R1,S1)))
        \add (\if (finite(R1) & finite(S1))
              \then (  card(inter1(R1,S1)) <= card(R1)
                     & card(inter1(R1,S1)) <= card(S1))
              \else (true) ==>)
        \heuristics (implications1)
    };

    cardInter2 {
        \find (card(inter2(R2,S2)))
        \add (\if (finite(R2) & finite(S2))
              \then (  card(inter2(R2,S2)) <= card(R2)
                     & card(inter2(R2,S2)) <= card(S2))
              \else (true) ==>)
        \heuristics (implications1)
    };

    cardInter3 {
        \find (card(inter3(R3,S3)))
        \add (\if (finite(R3) & finite(S3))
              \then (  card(inter3(R3,S3)) <= card(R3)
                     & card(inter3(R3,S3)) <= card(S3))
              \else (true) ==>)
        \heuristics (implications1)
    };

    cardJoin1x2 {
        \find (card(join1x2(R1,S2)))
        \add (\if (finite(R1) & finite(S2))
              \then (card(join1x2(R1,S2)) <= card(S2))
              \else (true) ==>)
        \heuristics (implications1)
    };

    cardJoin1x3 {
        \find (card(join1x3(R1,S3)))
        \add (\if (finite(R1) & finite(S3))
              \then (card(join1x3(R1,S3)) <= card(S3))
              \else (true) ==>)
        \heuristics (implications1)
    };

    cardJoin2x1 {
        \find (card(join2x1(R2,S1)))
        \add (\if (finite(R2) & finite(S1))
              \then (card(join2x1(R2,S1)) <= card(S2))
              \else (true) ==>)
        \heuristics (implications1)
    };

    cardJoin3x1 {
        \find (card(join3x1(R3,S1)))
        \add (\if (finite(R3) & finite(S1))
              \then (card(join3x1(R3,S1)) <= card(S3))
              \else (true) ==>)
        \heuristics (implications1)
    };

    cardJoin2x2 {
        \find (card(join2x2(R2,S2)))
        \add (\if (finite(R2) & finite(S2))
              \then (card(join2x2(R2,S2)) <= card(R2)*card(S2))
              \else (true) ==>)
        \heuristics (implications1)
    };

    cardSin {
        \find (card(sin(a)))
        \replacewith (1)
        \heuristics (simplify)
    };

    cardSin2 {
        \find (card(sin2(a2)))
        \replacewith (1)
        \heuristics (simplify)
    };

    cardSin3 {
        \find (card(sin3(a3)))
        \replacewith (1)
        \heuristics (simplify)
    };

    cardProd1x2 {
        \find (card(prod1x2(R1,S2)))
        \replacewith (\if (finite(R1) & finite(S2))
                      \then (card(R1)*card(S2))
                      \else (card(prod1x2(R1,S2))))
        \heuristics (simplify_enlarging, noDuplicateApp)
    };

    cardProd2x1 {
        \find (card(prod2x1(R2,S1)))
        \replacewith (\if (finite(R2) & finite(S1))
                      \then (card(R2)*card(S1))
                      \else (card(prod2x1(R2,S1))))
        \heuristics (simplify_enlarging, noDuplicateApp)
    };

    cardProd1x1 {
        \find (card(prod1x1(R1,S1)))
        \replacewith (\if (finite(R1) & finite(S1))
                      \then (card(R1)*card(S1))
                      \else (card(prod1x1(R1,S1))))
        \heuristics (simplify_enlarging, noDuplicateApp)
    };

    cardDiff1 {
        \find (card(diff1(R1,S1)))
        \replacewith (\if (finite(R1) & finite(S1))
                      \then (card(R1) - card(inter1(R1,S1)))
                      \else (card(diff1(R1,S1))))
        \heuristics (simplify_enlarging, noDuplicateApp)
    };

    cardDiff2 {
        \find (card(diff2(R2,S2)))
        \replacewith (\if (finite(R2) & finite(S2))
                      \then (card(R2) - card(inter2(R2,S2)))
                      \else (card(diff2(R2,S2))))
        \heuristics (simplify_enlarging, noDuplicateApp)
    };

    cardDiff3 {
        \find (card(diff3(R3,S3)))
        \replacewith (\if (finite(R3) & finite(S3))
                      \then (card(R3) - card(inter3(R3,S3)))
                      \else (card(diff3(R3,S3))))
        \heuristics (simplify_enlarging, noDuplicateApp)
    };

    cardTransp {
        \find (card(transp(R2)))
        \replacewith (\if (finite(R2))
                      \then (card(R2))
                      \else (card(transp(R2))))
        \heuristics (simplify_enlarging, noDuplicateApp)
    };

    cardOverr2 {
        \find (card(overr2(R2,S2)))
        \add (\if (finite(R2) & finite(S2))
              \then (card(overr2(R2,S2)) >= card(S2))
              \else (true) ==>)
        \heuristics (implications1)
    };

    cardOverr3 {
        \find (card(overr3(R3,S3)))
        \add (\if (finite(R3) & finite(S3))
              \then (card(overr3(R3,S3)) >= card(S3))
              \else (true) ==>)
        \heuristics (implications1)
    };

    cardDomRestr2 {
        \find (card(domRestr2(R1,S2)))
        \add (\if (finite(S2))
              \then (card(domRestr2(R1,S2)) <= card(S2))
              \else (true) ==>)
        \heuristics (implications1)
    };

    cardDomRestr3 {
        \find (card(domRestr3(R1,S3)))
        \add (\if (finite(S3))
              \then (card(domRestr3(R1,S3)) <= card(S3))
              \else (true) ==>)
        \heuristics (implications1)
    };

    cardRangeRestr2 {
        \find (card(rangeRestr2(R2,S1)))
        \add (\if (finite(R2))
              \then (card(rangeRestr2(R2,S1)) <= card(R2))
              \else (true) ==>)
        \heuristics (implications1)
    };

    cardRangeRestr3 {
        \find (card(rangeRestr3(R3,S1)))
        \add (\if (finite(R3))
              \then (card(rangeRestr3(R3,S1)) <= card(R3))
              \else (true) ==>)
        \heuristics (implications1)
    };

    cardNone1 {
        \find (card(none))
        \replacewith (0)
        \heuristics (simplify)
    };

    cardNone2 {
        \find (card(none2))
        \replacewith (0)
        \heuristics (simplify)
    };

    cardNone3 {
        \find (card(none3))
        \replacewith (0)
        \heuristics (simplify)
    };

    //---
    //cardinality lemmata
    //---
    cardinalityPositiveITE {
        \find (card(R))
        \add (\if (finite(R))
              \then (card(R) >= 0)
              \else (true) ==>)
        \heuristics (implications1)
    };

    cardZero1 {
        \find (card(R1) = 0)
        \replacewith (\if (finite(R1))
                      \then (R1 = none)
                      \else (card(R1) = 0))
        \heuristics (simplify_enlarging, noDuplicateApp)
    };

    cardZero2 {
        \find (card(R2) = 0)
        \replacewith (\if (finite(R2))
                      \then (R2 = none2)
                      \else (card(R2) = 0))
        \heuristics (simplify_enlarging, noDuplicateApp)
    };

    cardZero3 {
        \find (card(R3) = 0)
        \replacewith (\if (finite(R3))
                      \then (R3 = none3)
                      \else (card(R3) = 0))
        \heuristics (simplify_enlarging, noDuplicateApp)
    };

    cardGtZero {
        \assumes (finite(R), in(t,R) ==>)
        \find (card(R) > 0)
        \replacewith (true)
        \heuristics (concrete)
    };

    cardOne1 {
        \find (card(R) = 1 ==>)
        \add (\if (finite(R))
              \then (one(R))
              \else (true) ==>)
        \heuristics (implications1)
    };

    cardSubrel1 {
        \assumes (subrel(R,S) ==>)
        \find (card(R))
        \add (\if (finite(R) & finite(S))
              \then (card(R) <= card(S))
              \else (true) ==>)
        \heuristics (implications1)
    };

    cardSubrel2 {
        \assumes (subrel(R,S) ==>)
        \find (card(S))
        \add (\if (finite(R) & finite(S))
              \then (card(R) <= card(S))
              \else (true) ==>)
        \heuristics (implications1)
    };

    cardTransClos {
        \find (card(transClos(R2)))
        \add (\if (finite(R2))
              \then (card(transClos(R2)) >= card(R2))
              \else (true) ==>)
        \heuristics (implications1)
    };

    //---
    //infering finiteness
    //---

    finiteUnion1 {
        \find (finite(union1(R1,S1)))
        \replacewith (finite(R1) & finite(S1))
        \heuristics (simplify)
    };

    finiteUnion2 {
        \find (finite(union2(R2,S2)))
        \replacewith (finite(R2) & finite(S2))
        \heuristics (simplify)
    };
    
    finiteUnion3 {
        \find (finite(union3(R3,S3)))
        \replacewith (finite(R3) & finite(S3))
        \heuristics (simplify)
    };

    finiteInter1 {
        \find (finite(inter1(R1,S1)))
        \replacewith (\if (finite(R1) | finite(S1))
                      \then (true)
                      \else (finite(inter1(R1,S1))))
        \heuristics (simplify_enlarging, noDuplicateApp)
    };

    finiteInter2 {
        \find (finite(inter2(R2,S2)))
        \replacewith (\if (finite(R2) | finite(S2))
                      \then (true)
                      \else (finite(inter2(R2,S2))))
        \heuristics (simplify_enlarging, noDuplicateApp)
    };

    finiteInter3 {
        \find (finite(inter3(R3,S3)))
        \replacewith (\if (finite(R3) | finite(S3))
                      \then (true)
                      \else (finite(inter3(R3,S3))))
        \heuristics (simplify_enlarging, noDuplicateApp)
    };

    finiteDiff1 {
        \find (finite(diff1(R1,S1)))
        \replacewith (\if (finite(R1))
                      \then (true)
                      \else (finite(diff1(R1,S1))))
        \heuristics (simplify_enlarging, noDuplicateApp)
    };

    finiteDiff2 {
        \find (finite(diff2(R2,S2)))
        \replacewith (\if (finite(R2))
                      \then (true)
                      \else (finite(diff2(R2,S2))))
        \heuristics (simplify_enlarging, noDuplicateApp)
    };

    finiteDiff3 {
        \find (finite(diff3(R3,S3)))
        \replacewith (\if (finite(R3))
                      \then (true)
                      \else (finite(diff3(R3,S3))))
        \heuristics (simplify_enlarging, noDuplicateApp)
    };

    finiteSin1 {
        \find (finite(sin(a)))
        \replacewith (true)
        \heuristics (simplify)
    };

    finiteSin2 {
        \find (finite(sin2(a2)))
        \replacewith (true)
        \heuristics (simplify)
    };

    finiteSin3 {
        \find (finite(sin3(a3)))
        \replacewith (true)
        \heuristics (simplify)
    };

    finiteNone {
        \find (finite(none))
        \replacewith (true)
        \heuristics (simplify)
    };

    finiteNone2 {
        \find (finite(none2))
        \replacewith (true)
        \heuristics (simplify)
    };

    finiteNone3 {
        \find (finite(none3))
        \replacewith (true)
        \heuristics (simplify)
    };

    finiteOne {
        \assumes (one(R) ==>)
        \find (finite(R))
        \replacewith (true)
        \heuristics (simplify)
    };

    finiteLone {
        \assumes (lone(R) ==>)
        \find (finite(R))
        \replacewith (true)
        \heuristics (simplify)
    };

    finiteSubrel {
        \assumes (subrel(R,S), finite(S) ==>)
        \find (finite(R))
        \replacewith (true)
        \heuristics (simplify_enlarging, notTopLevelInAntec)
    };

    finiteJoin1x2 {
        \find (finite(join1x2(R1,S2)))
        \replacewith (\if (finite(S2))
                      \then (true)
                      \else (finite(join1x2(R1,S2))))
        \heuristics (simplify, noDuplicateApp)
    };

    finiteJoin1x3 {
        \find (finite(join1x3(R1,S3)))
        \replacewith (\if (finite(S3))
                      \then (true)
                      \else (finite(join1x3(R1,S3))))
        \heuristics (simplify_enlarging, noDuplicateApp)
    };

    finiteJoin2x2 {
        \find (finite(join2x2(R2,S2)))
        \replacewith (\if (finite(R2) & finite(S2))
                      \then (true)
                      \else (finite(join2x2(R2,S2))))
        \heuristics (simplify_enlarging, noDuplicateApp)
    };

    finiteJoin3x1 {
        \find (finite(join3x1(R3,S1)))
        \replacewith (\if (finite(R3))
                      \then (true)
                      \else (finite(join3x1(R3,S1))))
        \heuristics (simplify_enlarging, noDuplicateApp)
    };

    finiteJoin2x1 {
        \find (finite(join2x1(R2,S1)))
        \replacewith (\if (finite(R2))
                      \then (true)
                      \else (finite(join2x1(R2,S1))))
        \heuristics (simplify_enlarging, noDuplicateApp)
    };

    finiteProd1x1 {
        \find (finite(prod1x1(R1,S1)))
        \replacewith (finite(R1) & finite(S1))
        \heuristics (simplify)
    };

    finiteProd1x2 {
        \find (finite(prod1x2(R1,S2)))
        \replacewith (finite(R1) & finite(S2))
        \heuristics (simplify)
    };

    finiteProd2x1 {
        \find (finite(prod2x1(R2,S1)))
        \replacewith (finite(R2) & finite(S1))
        \heuristics (simplify)
    };

    finiteOverr2 {
        \find (finite(overr2(R2,S2)))
        \replacewith (\if (finite(R2) & finite(S2))
                      \then (true)
                      \else (finite(overr2(R2,S2))))
        \heuristics (simplify_enlarging, noDuplicateApp)
    };

    finiteOverr3 {
        \find (finite(overr3(R3,S3)))
        \replacewith (\if (finite(R3) & finite(S3))
                      \then (true)
                      \else (finite(overr3(R3,S3))))
        \heuristics (simplify_enlarging, noDuplicateApp)
    };

    finiteTransp {
        \find (finite(transp(R2)))
        \replacewith (finite(R2))
        \heuristics (simplify)
    };

    finiteDomRestr2 {
        \find (finite(domRestr2(R1,S2)))
        \replacewith (\if (finite(S2))
                      \then (true)
                      \else (finite(domRestr2(R1,S2))))
        \heuristics (simplify_enlarging, noDuplicateApp)
    };

    finiteDomRestr3 {
        \find (finite(domRestr3(R1,S3)))
        \replacewith (\if (finite(S3))
                      \then (true)
                      \else (finite(domRestr3(R1,S3))))
        \heuristics (simplify_enlarging, noDuplicateApp)
    };

    finiteRangeRestr2 {
        \find (finite(rangeRestr2(R2,S1)))
        \replacewith (\if (finite(R2))
                      \then (true)
                      \else (finite(rangeRestr2(R2,S1))))
        \heuristics (simplify_enlarging, noDuplicateApp)
    };

    finiteRangeRestr3 {
        \find (finite(rangeRestr3(R3,S1)))
        \replacewith (\if (finite(R3))
                      \then (true)
                      \else (finite(rangeRestr3(R3,S1))))
        \heuristics (simplify_enlarging, noDuplicateApp)
    };

    finiteTransClos {
        \find (finite(transClos(R2)))
        \replacewith (finite(R2))
        \heuristics (simplify)
    };

}

