\schemaVariables {
    \term Relation R,S;
    \term Rel1 R1,S1;
    \term Rel2 R2,S2;
    \term Rel3 R3,S3;
    \term Tuple t;
    \term Atom a,b,c,d,e,f;
    \term Tuple2 a2,b2;
    \term Tuple3 a3,b3;
    \term int n,m;
    \variables Atom va,vb,vc,vd,ve;
    \variables int vn;
    \variables Tuple vt,vu;
    \variables Tuple2 va2;
    \variables Tuple3 va3;
    \formula phi, psi;
    \skolemTerm Atom nva,nvb,nvc;
}

\rules {

    noExit_ { /* proven */
        \varcond (\notFreeIn(va,R2,phi),\notFreeIn(vb,R2,phi))
        \add (==> \forall va; \forall vb; (
                      {\subst vc; va}phi
                    & !{\subst vc; vb}phi
                    -> !in(binary(va,vb),R2)));
        \add (\forall va; \forall vb; ({\subst vc; va}phi
                    & !{\subst vc; vb}phi
                    -> !in(binary(va,vb),transClos(R2))) ==>)
    };

    noExit {/* proven */
        \find (in(binary(a,b),transClos(R2)) ==>)
        \varcond (\notFreeIn(va,R2,phi),\notFreeIn(vb,R2,phi))
        \add (==> \forall va; \forall vb; (
                      {\subst vc; va}phi
                    & !{\subst vc; vb}phi
                    -> !in(binary(va,vb),R2)));
        \add (!{\subst vc; a}phi | {\subst vc; b}phi ==> )
        \heuristics (closureNoExit)
    };

    restrictedSubset_ { /* proven */
        \varcond (\notFreeIn(va,R2,S2),\notFreeIn(vb,psi,R2,S2))
        \add (==> \forall va; \forall vb; (
                       psi & in(binary(va,vb),R2)
                    -> {\subst va; vb}psi));
        \add (==> \forall va; \forall vb; (
                       psi & {\subst va; vb}psi
                    -> phi));
        \add (==> \forall va; \forall vb; (
                         psi & {\subst va; vb}psi
                       & phi & in(binary(va,vb),R2)
                    -> in(binary(va,vb),S2)));
        \add (\forall va;
                \forall vb; (
                     psi & phi & in(binary(va,vb),transClos(R2))
                  -> in(binary(va,vb),transClos(S2))) ==>)
    };

    // TODO: application throws exception for some reason!
    restrictedSubset { /* proved */
        \assumes (==> in(binary(a,b),transClos(S2)))
        \find (in(binary(a,b),transClos(R2)) ==>)
        \varcond (\notFreeIn(va,R2,S2,a,b),\notFreeIn(vb,psi,R2,S2,a,b))
        \add (==> \forall va; \forall vb; (
                       psi & in(binary(va,vb),R2)
                    -> {\subst va; vb}psi));
        \add (==> \forall va; \forall vb; (
                       psi & {\subst va; vb}psi
                    -> phi));
        \add (==> \forall va; \forall vb; (
                         psi & {\subst va; vb}psi
                       & phi & in(binary(va,vb),R2)
                    -> in(binary(va,vb),S2)));
        \add (==> {\subst va; a}psi & {\subst va; a}{\subst vb; b}phi)
    };

    tc_obtainFront { /* proved */
        \find (in(binary(a,b),transClos(R2)) ==>)
        \varcond (\notFreeIn(vc,a,b,R2))
        \add (\exists vc; in(binary(a,vc),R2) ==>)
        \heuristics (implications3)
    };
    tc_obtainFrontBacktrack {
        \assumes (in(binary(a,b),R2) ==>)
        \find (\exists vc; in(binary(a,vc),R2) ==>)
        \varcond (\notFreeIn(vc,a,b,R2))
        \replacewith (==>)
        \heuristics (concrete)
    };

    tc_obtainBack { /* proved */
        \find (in(binary(a,b),transClos(R2)) ==>)
        \varcond (\notFreeIn(vc,a,b,R2))
        \add (\exists vc; in(binary(vc,b),R2) ==>)
        \heuristics (implications3)
    };
    tc_obtainBackBacktrack {
        \assumes (in(binary(a,b),R2) ==>)
        \find (\exists vc; in(binary(vc,b),R2) ==>)
        \varcond (\notFreeIn(vc,a,b,R2))
        \replacewith (==>)
        \heuristics (concrete)
    };

    tc_transitivity1 { /* proved */
        \assumes (in(binary(a,b),R2) ==>)
        \find (in(binary(b,c),transClos(R2)) ==>)
        \add (in(binary(a,c),transClos(R2)) ==>)
        \heuristics (implications2)
        \displayname "transitivity"
    };

    tc_transitivity2 { /* proved */
        \assumes (in(binary(a,b),transClos(R2)) ==>)
        \find (in(binary(b,c),transClos(R2)) ==>)
        \add (in(binary(a,c),transClos(R2)) ==>)
        \heuristics (implications2)
        \displayname "transitivity"
    };

    tc_transitivity3 { /* proved */
        \assumes (in(binary(a,b),transClos(R2)) ==>)
        \find (in(binary(b,c),R2) ==>)
        \add (in(binary(a,c),transClos(R2)) ==>)
        \heuristics (implications2)
        \displayname "transitivity"
    };

    tc_transitivity4 { /* proved */
        \assumes (in(binary(a,b),R2), in(binary(b,c),R2) ==>)
        \find (transClos(R2))
        \add (in(binary(a,c),transClos(R2)) ==>)
        \heuristics (implications2)
        \displayname "transitivity"
    };

    tc_transitivityJoin4 { /* proved */
        \assumes (in(ternary(a,b,c),R3), in(ternary(a,c,d),R3) ==>)
        \find (transClos(join1x3(sin(a),R3)))
        \add (in(binary(b,c),transClos(join1x3(sin(a),R3))) ==>)
        \heuristics (implications2)
        \displayname "transitivity"
    };
    tc_transitivityJoin4_ { /* proved */
        \assumes (in(ternary(b,c,a),R3), in(ternary(c,d,a),R3) ==>)
        \find (transClos(join3x1(R3,sin(a))))
        \add (in(binary(b,c),transClos(join3x1(R3,sin(a)))) ==>)
        \heuristics (implications2)
        \displayname "transitivity"
    };

    transClosProd { /* proved */
        \find (transClos(prod1x1(R1,S1)))
        \sameUpdateLevel
        \replacewith (prod1x1(R1,S1))
        \heuristics (simplify)
        \displayname "closure_simplify"
    };

    useTransClosSubrel { /* proved */
        \assumes (subrel(R2,S2) ==>)
        // only match if tc is at least present in sequent
        \find (transClos(R2))
        \sameUpdateLevel
        \add (subrel(transClos(R2),transClos(S2)) ==>)
        \heuristics (implications3)
        \displayname "lift_subrel_to_closure"
    };

    useTransClosSubrel2 { /* proved */
        \assumes (subrel(R2,S2) ==>)
        // only match if tc is at least present in sequent
        \find (transClos(S2))
        \sameUpdateLevel
        \add (subrel(transClos(R2),transClos(S2)) ==>)
        \heuristics (implications3)
        \displayname "lift_subrel_to_closure"
    };

    transClosUnionTrans { /* proved */
        \assumes (in(binary(a,b),transClos(union2(R2,S2))) ==>)
        \find (in(binary(b,c),R2) ==>)
        \add (in(binary(a,c),transClos(union2(R2,S2))) ==>)
        \heuristics (implications2)
        \displayname "transitivity"
    };
    transClosUnionTrans_ { /* proved */
        \assumes (in(binary(a,b),transClos(union2(R2,S2))) ==>)
        \find (in(binary(b,c),S2) ==>)
        \add (in(binary(a,c),transClos(union2(R2,S2))) ==>)
        \heuristics (implications2)
        \displayname "transitivity"
    };
    transClosUnionTransJoin { /* proved */
        \assumes (in(binary(b,c),transClos(union2(join1x3(sin(a),R3),S2))) ==>)
        \find (in(ternary(a,c,d),R3) ==>)
        \add (in(binary(b,d),transClos(union2(join1x3(sin(a),R3),S2))) ==>)
        \heuristics (implications2)
        \displayname "transitivity"
    };
    transClosUnionTransJoin_ { /* proved */
        \assumes (in(binary(b,c),transClos(union2(S2,join1x3(sin(a),R3)))) ==>)
        \find (in(ternary(a,c,d),R3) ==>)
        \add (in(binary(b,d),transClos(union2(S2,join1x3(sin(a),R3)))) ==>)
        \heuristics (implications2)
        \displayname "transitivity"
    };
    transClosUnionTransJoin2 { /* proved */
        \assumes (in(binary(b,c),transClos(union2(join3x1(R3,sin(a)),S2))) ==>)
        \find (in(ternary(c,d,a),R3) ==>)
        \add (in(binary(b,d),transClos(union2(join3x1(R3,sin(a)),S2))) ==>)
        \heuristics (implications2)
        \displayname "transitivity"
    };
    transClosUnionTransJoin2_ { /* proved */
        \assumes (in(binary(b,c),transClos(union2(S2,join3x1(R3,sin(a))))) ==>)
        \find (in(ternary(c,d,a),R3) ==>)
        \add (in(binary(b,d),transClos(union2(S2,join3x1(R3,sin(a))))) ==>)
        \heuristics (implications2)
        \displayname "transitivity"
    };

    tc_transitivityJoin1 { /* proved */
        \assumes (in(ternary(a,b,c),R3) ==>)
        \find (in(binary(c,d),transClos(join1x3(sin(a),R3))) ==>)
        \add (in(binary(b,d),transClos(join1x3(sin(a),R3))) ==>)
        \heuristics (implications2)
        \displayname "transitivity"
    };
    tc_transitivityJoin1_ { /* proved */
        \assumes (in(ternary(b,c,a),R3) ==>)
        \find (in(binary(c,d),transClos(join3x1(R3,sin(a)))) ==>)
        \add (in(binary(b,d),transClos(join3x1(R3,sin(a)))) ==>)
        \heuristics (implications2)
        \displayname "transitivity"
    };
    tc_transitivityJoin2 { /* proved */
        \assumes (in(ternary(a,c,d),R3) ==>)
        \find (in(binary(b,c),transClos(join1x3(sin(a),R3))) ==>)
        \add (in(binary(b,d),transClos(join1x3(sin(a),R3))) ==>)
        \heuristics (implications2)
        \displayname "transitivity"
    };
    tc_transitivityJoin2_ { /* proved */
        \assumes (in(ternary(c,d,a),R3) ==>)
        \find (in(binary(b,c),transClos(join3x1(R3,sin(a)))) ==>)
        \add (in(binary(b,d),transClos(join3x1(R3,sin(a)))) ==>)
        \heuristics (implications2)
        \displayname "transitivity"
    };

    transClosIden { /* proved */
        \find (transClos(iden))
        \replacewith (iden)
        \heuristics (simplify)
    };

    transClosSin { /* proved */
        \find (transClos(sin2(a2)))
        \replacewith (sin2(a2))
        \heuristics (simplify)
    };

    transClosNone { /* proved */
        \find (transClos(none2))
        \replacewith (none2)
        \heuristics (simplify)
    };

    transClosLone { /* proved */
        \assumes (lone(R2) ==>)
        \find (transClos(R2))
        \sameUpdateLevel
        \replacewith (R2)
        \heuristics (simplify)
    };

  closure_induction {
    \find (in(binary(a,b),transClos(R2)) ==>)
    \varcond (\notFreeIn(va,a,b,R2,phi), \notFreeIn(vb,a,b,R2,phi),
              \notFreeIn(vc,a,b,R2,phi), \notFreeIn(vd,a,b,R2),
              \notFreeIn(ve,a,b,R2))
    \add (==> \forall va; \forall vb; (
                in(binary(va,vb),R2) -> {\subst vd; va}{\subst ve; vb}phi));
    \add (==> \forall va; \forall vb; \forall vc; (
                  in(binary(va,vb),transClos(R2))
                & in(binary(vb,vc),R2) & {\subst vd; va}{\subst ve; vb}phi
                -> {\subst vd; va}{\subst ve; vc}phi));
    \add ({\subst vd; a}{\subst ve; b}phi ==>)
  };

  closure_induction2 {
    \find (in(binary(a,b),transClos(R2)) ==>)
    \varcond (\notFreeIn(va,a,b,R2,phi), \notFreeIn(vb,a,b,R2,phi),
              \notFreeIn(vc,a,b,R2,phi), \notFreeIn(vd,a,b,R2),
              \notFreeIn(ve,a,b,R2))
    \add (==> \forall va; \forall vb; (
                in(binary(va,vb),R2) -> {\subst vd; va}{\subst ve; vb}phi));
    \add (==> \forall va; \forall vb; \forall vc; (
                  in(binary(vb,vc),transClos(R2))
                & in(binary(va,vb),R2) & {\subst vd; vb}{\subst ve; vc}phi
                -> {\subst vd; va}{\subst ve; vc}phi));
    \add ({\subst vd; a}{\subst ve; b}phi ==>)
  };

    tc_transp { /* proved */
        \find (transClos(transp(R2)))
        \replacewith (transp(transClos(R2)))
        \heuristics (simplify)
    };


}